{"version":3,"sources":["wscljs/client.cljs"],"mappings":";AAMA,AAAA,AAAMA,AAAQC;AAAd,AAAA;AAEE,AAAAC,AAAOG;AAAPF,AAAS,AAAcF;AAAvB,AAAA,AAAA,AAAAC,AAAAA,AAAA,AAAAC,AAAAD,AAAA,AAAAC;AAAA;;AAAA,AAAA,AAAAD,AAAAA,AAAA,AAAAC,AAAAD,AAAA,AAAAC;AAAA;;AAAA,AAAA,AAAAD,AAAAA,AAAA,AAAAC,AAAAD,AAAA,AAAAC;AAAA;;AAAA,AAAA,AAAAD,AAAAA,AAAA,AAAAC,AAAAD,AAAA,AAAAC;AAAA;;AAAA,AAAA,AAAAC,AAAA,AAAA,AAAAD;;;;;;AAMF;;;;;;;;;;;;;;;;;;;;;;;AAAA,AAAAG,AAAMM,AAsBHC;AAtBH,AAAA,AAAAN,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAAE,AAAAC,AAAAH,AAAAA;AAAAA,AAsByDW;AAtBzD,AAAAP,AAAAJ,AAAA,AAsBeO;AAtBf,AAAAH,AAAAJ,AAAA,AAsBuBQ;AAtBvB,AAAAJ,AAAAJ,AAAA,AAsBkCS;AAtBlC,AAAAL,AAAAJ,AAAA,AAsB2CU;AAtB3C,AAAA,AAuBS,AAAA,AAACE,AAAyCD;AAvBnD;AAAA,AAAA,AAAA,AAAAd,AAAA;;;AAwBE,AAAAgB,AAAc,AAAAE,AAAeT;AAA7B,AAAA,AAAAO;AAAA,AAAAA,AAASC;AAAT,AACE,AACE,AAAM,AAAUA,AAAMP;;AACtB,AAAM,AAAaO,AAAMN;;AACzB,AAAM,AAAWM,AAAML;;AACvB,AAAM,AAAWK,AAAMJ;;AACvBI;;AACF,AAAO,AAAAjB,AAAW,AAAA,AAAsCS;;;AAE5D,AAAA;;;AAAA,AAAAU,AAAME;AAAN,AAAA,AAAAD,AAAA,AAAA;AAAA,AAAA,AAAAA;AAAA;AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;;AAAA;AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;;;AAAA,AAAA,AAAArB,AAAA,AAAA,AAAA,AAAA;;;;;AAAA,AAAA,AAAA,AAAMqB,AAEFxB,AAAOyB;AAFX,AAGG,AAACC,AAAK1B,AAAOyB,AAAKE;;;AAHrB,AAAA,AAAA,AAAMH,AAIFxB,AAAOyB,AAAKG;AAJhB,AAAA,AAKU,AAAA,AAACV,AAAkClB;AAL7C;AAAA,AAAA,AAAA,AAAAG,AAAA;;;AAMG,AAAOH,AAAO,AAAC6B,AAAUD,AAAOH;;;AANnC,AAAA,AAAA,AAAMD;;AAAN,AAQA;;;AAAA,AAAMM,AAEH9B;AAFH,AAGE,AAAQA","names":["wscljs.client/status","socket","pred__48182","expr__48183","js/Error","cljs.core/=","p__48186","map__48187","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","wscljs.client/create","url","on-open","on-message","on-close","on-error","handler-map","cljs.spec.alpha.valid_QMARK_","temp__5733__auto__","sock","js/WebSocket","var_args","G__48190","wscljs.client/send","data","wscljs.client.send","wscljs.format/identity","format","wscljs.format/write","wscljs.client/close"],"sourcesContent":["(ns wscljs.client\n  (:require [wscljs.format :as fmt]\n            [wscljs.spec :as ws-spec]\n            [cljs.spec.alpha :as s]))\n\n\n(defn status [socket]\n  \"Retrieves the connection status of the socket.\"\n  (condp = (.-readyState socket)\n    0 :connecting\n    1 :open\n    2 :stopping\n    3 :stopped))\n\n(defn create\n  \"Starts a websocket connection and returns it.\n\n  Takes the following arguments:\n\n  url         => the websocket url\n  handler-map => a hashmap containing handler functions mapping to:\n\n                 - :on-open    => called when opening a socket connection\n                 - :on-message => called when recieving message on the socket\n                 - :on-close   => called when closing a socket connection\n\n  Usage:\n\n  (require '[wscljs.client :as ws]\n           '[wscljs.format :as fmt])\n\n\n  (def socket (ws/create \\\"ws://....\\\" handler-map))\n\n  (ws/send socket data fmt/json)\n  \"\n  [url {:keys [on-open on-message on-close on-error] :as handler-map}]\n  {:pre [(s/valid? ::ws-spec/websocket-handler-map handler-map)]}\n  (if-let [sock (js/WebSocket. url)]\n    (do\n      (set! (.-onopen sock) on-open)\n      (set! (.-onmessage sock) on-message)\n      (set! (.-onclose sock) on-close)\n      (set! (.-onerror sock) on-error)\n      sock)\n    (throw (js/Error. (str \"Web socket connection failed: \" url)))))\n\n(defn send\n  \"Sends data over socket in the specified format.\"\n  ([socket data]\n   (send socket data fmt/identity))\n  ([socket data format]\n   {:pre [(s/valid? ::ws-spec/websocket-open socket)]}\n   (.send socket (fmt/write format data))))\n\n(defn close\n  \"Closes the socket connection.\"\n  [socket]\n  (.close socket))\n"]}