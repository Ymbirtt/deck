{"version":3,"sources":["day8/re_frame_10x/tools/coll.cljs"],"mappings":";AAEA;;;AAAA,AAAMA,AAEHC;AAFH,AAGE,AAAMC,AAAI,AAACC,AAAMF;AAAjB,AACE,AAAI,AAAA,AAAOC;AAAX;;AAEE,AAACE,AAAIH,AAAE,AAAA,AAAKC;;;AAElB;;;AAAA,AAAMG,AAEHC,AAAKL;AAFR,AAGE,AAAA,AAAAM,AAAAC,AAACC;AAAD,AAAe,AAAM,AAAAD,AAAAA,AAACF,AAAAA,AAAAA;AAAP,AAAAC;;AAAA;;AAAoBN;;AAErC;;;AAAA,AAAMS,AAEHJ,AAAKL;AAFR,AAGE,AAACU,AAAM,AAACN,AAAwBC,AAAKL;;AAEvC;;;AAAA,AAAMW,AAEHC,AAAUC;AAFb,AAGE,AAAA,AAAAC,AAACC;AAAD,AAAS,AAAA,AAAA,AAAIH,AAAU,AAAA,AAAAE,AAAA,AAAA,AAAAA,AAAQD;;;AAEjC;;;;;AAAA,AAAAG,AAAMM,AAIHC;AAJH,AAAA,AAAAN,AAAAD;AAAAE,AAAA,AAAAC,AAAAF;AAAAG,AAAA,AAAAV,AAAAQ;AAAAA,AAAA,AAAAG,AAAAH;AAAAE,AAIMI;AAJNN,AAIUO;AAJVR,AAIiBS;AAJjB,AAKE,AAAID;AACF,AAAAE,AAAiB,AAACE,AAAiBN,AAAEC;AAArC,AAAA,AAAAG;AAAA,AAAAA,AAASC;AAAT,AACE,AAAME,AAAO,AAACR,AAAAA,AAAAA,AAAUM,AAAAA,AAAQH,AAAAA;AAAhC,AACE,AAAI,AAACN,AAAIW;AACP,AAACC,AAAMR,AAAEC,AAAEM;;AACX,AAACE,AAAOT,AAAEC;;;AACdD;;;AACF,AAACS,AAAOT,AAAEC;;;AAEd;;;AAAA,AAAMS,AAEHV,AAAEE;AAFL,AAGE,AAACS,AACC,AAAKC,AAAIX;AAAT,AACE,AAAI,AAACY,AAAMD;AACT,AAAChC,AAAIgC,AAAIX;;AACT,AAACK,AAAIM,AAAIX;;AACbD,AACAE","names":["day8.re-frame-10x.tools.coll/last-in-vec","v","num","cljs.core/count","cljs.core.nth","day8.re-frame-10x.tools.coll/find-all-indexes-in-vec","pred","p1__45294#","p2__45293#","cljs.core.keep_indexed","day8.re-frame-10x.tools.coll/find-index-in-vec","cljs.core/first","day8.re-frame-10x.tools.coll/id-between-xf","beginning","ending","p1__45299#","cljs.core.filter","p__45316","vec__45319","seq__45320","cljs.core/seq","first__45321","cljs.core/next","day8.re-frame-10x.tools.coll/dissoc-in","m","k","ks","keys","temp__5733__auto__","nextmap","cljs.core.get","newmap","cljs.core.assoc","cljs.core.dissoc","day8.re-frame-10x.tools.coll/get-in-with-lists","cljs.core.reduce","ret","cljs.core/list?"],"sourcesContent":["(ns day8.re-frame-10x.tools.coll)\n\n(defn last-in-vec\n  \"Get the last element in the vector. Returns nil if v is empty\"\n  [v]\n  (let [num (count v)]\n    (if (zero? num)\n      nil\n      (nth v (dec num)))))\n\n(defn find-all-indexes-in-vec\n  \"Gets the index of all items in vec that match the predicate\"\n  [pred v]\n  (keep-indexed #(when (pred %2) %1) v))\n\n(defn find-index-in-vec\n  \"Gets the index of the first item in vec that matches the predicate\"\n  [pred v]\n  (first (find-all-indexes-in-vec pred v)))\n\n(defn id-between-xf\n  \"Returns a transducer that filters for :id between beginning and ending.\"\n  [beginning ending]\n  (filter #(<= beginning (:id %) ending)))\n\n(defn dissoc-in\n  \"Dissociates an entry from a nested associative structure returning a new\n  nested structure. keys is a sequence of keys. Any empty maps that result\n  will not be present in the new structure.\"\n  [m [k & ks :as keys]]\n  (if ks\n    (if-let [nextmap (clojure.core/get m k)]\n      (let [newmap (dissoc-in nextmap ks)]\n        (if (seq newmap)\n          (assoc m k newmap)\n          (dissoc m k)))\n      m)\n    (dissoc m k)))\n\n(defn get-in-with-lists\n  \"cljs.core/get-in with support for index access of lists.\"\n  [m ks]\n  (reduce\n    (fn [ret k]\n      (if (list? ret)\n        (nth ret k)\n        (get ret k)))\n    m\n    ks))"]}