{"version":3,"sources":["imperium/client_beta.cljs"],"mappings":";AAMA,AAAA,AAAMA,AAAKC,AAAQC;AAAnB,AACE,AAAMC,AAAWF,AAAQ,AAAYG,AAAQ,AAACC,AAAQH;;AAExD,AAAA,AAAAI,AAAAC,AAAAC;AAAA;AAAA,AAAA,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAUS;AAAVR,AAAA,AAAAD,AAAA;AAAAE,AAAA,AAAAF,AAAA;AAAAG,AAAA,AAAAH,AAAA;AAAAI,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAAC,AAAA;AAAA,AAAA,AAAAA,AAAAA,AAAAA;;AAAA,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAJ,AAAAL,AAAAE,AAAAC,AAAAC;;;AAEA,AAAA,AAAMO,AACHC;AADH,AAEE,AAAA,AAACrB,AAAuBqB;;AACxB,AAAAC,AAAqBD,AAAM,AAAS,AAACI;AAArC,AAAAF,AAAAD,AAAA,AAAA,AAAOE;AAAP,AAAAD,AAAAD,AAAA,AAAA,AAAWpB;AAAX,AACE,AAAA,AAAA,AAAA,AAACiB,AAAqBK,AACDtB;;AAEzB,AAAAiB,AAAA,AAAA,AAAAO;AAAA,AAAA,AAAAC,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAAE,AAAAC,AAAAH,AAAAA;AAAA,AAAAZ,AAAAY,AAAA,AACWN;AADX,AAEE,AAAA,AAACrB,AAAuBqB;;AAE1B,AAAAF,AAAA,AAAA,AAAAY;AAAA,AAAA,AAAAC,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAJ,AAAA,AAAAI,AAAA,AAAA,AAAA,AAAA,AAAAH,AAAAC,AAAAE,AAAAA;AAAA,AAAAjB,AAAAiB,AAAA,AACWC;AADX,AAEE,AAAA,AAACjC,AAA8BiC;;AAEjC,AAAA,AAAA3B,AAAAC,AAAA2B;AAAA;AAAA,AAAA,AAASC,AAAO,AAAA,AAACzB;;AAEjB,AAAA,AAAA,AAAA,AAAA,AAAK0B,AAAsBhB;AAA3B,AACyB,AAAA,AAACiB;AAD1B,AAAA;AAAA,AAE0B,AAAA,AAACA;AAF3B,AAAA;AAAA,AAG0B,AAAA,AAACA;;AAE3B,AAAA,AAAMC,AAAOjB;AAAb,AACE,AAAA,AAAAkB,AAACC,AAASL,AAAOd,AAAMoB;;AAEzB,AAAA,AAAMC,AAAeC;AAArB,AACE,AAAA,AAAoCA;;AAEtC,AAAA,AAAMC,AAAQD;AAAd,AACE,AAACE,AAAOV,AACA,AAACW,AAAU,AAACJ,AAAcC,AAAMP;;AAE1C,AAAA,AAAMW;AAAN,AACE,AAAA,AAAAR,AAACS,AAAUb;;AACX,AAAA,AAACU,AAAOV;;AAEV","names":["imperium.client-beta/log","message","data","js/console","js/JSON","cljs.core/clj->js","js/imperium","js/imperium.client-beta","js/imperium.client-beta.handle-event","method-table__4619__auto__","cljs.core.atom","prefer-table__4620__auto__","method-cache__4621__auto__","cached-hierarchy__4622__auto__","hierarchy__4623__auto__","cljs.core.get","fexpr__50343","cljs.core/MultiFn","cljs.core.symbol","imperium.client-beta/handle-event","imperium.client-beta/on-message-handler","event","vec__50344","cljs.core.nth","key","clojure.edn.read_string","p__50347","map__50348","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","p__50350","map__50351","?data","js/imperium.client-beta.socket","imperium.client-beta/socket","imperium.client-beta/handlers","cljs.core.prn","imperium.client-beta/send!","cljs.core/deref","wscljs.client.send","wscljs.format/edn","imperium.client-beta/websocket-url","uuid","imperium.client-beta/start!","cljs.core/reset!","wscljs.client/create","imperium.client-beta/stop!","wscljs.client/close"],"sourcesContent":["(ns imperium.client-beta\n  (:require [wscljs.client :as ws]\n            [wscljs.format :as fmt]\n            [re-frame.core :as rf]\n            [clojure.edn :as edn]))\n\n(defn log [message data]\n  (.log js/console message (.stringify js/JSON (clj->js data))))\n\n(defmulti handle-event :id)\n\n(defn on-message-handler\n  [event]\n  (log \"Received message\" event)\n  (let [[key data] (-> event (.-data) (edn/read-string))]\n    (handle-event {:event key\n                   :data data})))\n\n(defmethod handle-event :default\n  [{:keys [event]}]\n  (log \"Unhandled event:\" event))\n\n(defmethod handle-event :chsk/recv\n  [{:keys [?data]}]\n  (log \"Push event from server:\" ?data))\n\n(defonce socket (atom nil))\n\n(def handlers {:on-message on-message-handler\n               :on-open #(prn \"Opening a new connection\")\n               :on-close #(prn \"Closing a connection\")\n               :on-error #(prn \"An error occurred\")})\n\n(defn send! [event]\n  (ws/send @socket event fmt/edn))\n\n(defn websocket-url [uuid]\n  (str \"ws://localhost:8890/ws?uuid=\" uuid))\n\n(defn start! [uuid]\n  (reset! socket\n          (ws/create (websocket-url uuid) handlers)))\n\n(defn stop! []\n  (ws/close @socket)\n  (reset! socket nil))\n\n(comment\n  (start! #uuid \"d2f0b2a8-59f3-48b8-84e1-6148345eeb93\")\n  (send! [:thing \"foo\"])\n  (stop!))\n\n\n\n\n\n\n\n\n"]}