{"version":3,"sources":["day8/re_frame_10x/panels/timing/subs.cljs"],"mappings":";AAQA,AAAA,AAAA,AAAA,AAAA,AAACA,AAGC,AAAKC;AAAL,AACE,AAAMC,AAAe,AAAA,AAACC,AAAIF;AACpBG,AAAe,AAACC,AAAuBJ;AAD7C,AAEE,AAACK,AAAmBJ,AAAeE;;AAEzC,AAAA,AAAA,AAAA,AAAA,AAACJ,AAGC,AAAKC;AAAL,AACE,AAAA,AAAAM,AAACC;AAAD,AAAS,AAAI,AAAAD,AAACE,AACD,AAAAF,AAACG;AACNT;;AAEZ,AAAA,AAAA,AAAA,AAAA,AAACD,AAGC,AAAKW;AAAL,AACE,AAACC,AAAM,AAACJ,AAAOC,AAA+BE;;AAElD,AAAA;;;AAAA,AAAAE,AAAcE;AAAd,AAAA,AAAAD,AAAA,AAAA;AAAA,AAAA,AAAAA;AAAA;AAAA,AAAAC;;;AAAA;AAAA,AAAAA,AAAA,AAAA,AAAA;;;AAAA;AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;;;AAAA,AAAAC,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAE;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAAJ,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAI;;;;;AAAA,AAAA,AAAA,AAAcJ;AAAd,AAAA;;;AAAA,AAAA,AAAA,AAAcA,AAGVY;AAHJ,AAGOA;;;AAHP,AAAA,AAAA,AAAcZ,AAIVY,AAAEC;AAJN,AAIS,AAAaD,AAAEC;;;AAJxB,AAAA,AAAA,AAAA,AAAcb,AAKVY,AAAEC,AAAIC;AALV,AAMG,AAACC,AAAOC,AAAE,AAAaJ,AAAEC,AAAGC;;;AAN/B;AAAA,AAAA,AAAA,AAAAR,AAAcN;AAAd,AAAA,AAAAO,AAAA,AAAAC,AAAAF;AAAAA,AAAA,AAAAG,AAAAH;AAAAI,AAAA,AAAAF,AAAAF;AAAAA,AAAA,AAAAG,AAAAH;AAAA,AAAA,AAAAK,AAAA;AAAA,AAAA,AAAAA,AAAAJ,AAAAG,AAAAJ;;;AAAA,AAAA,AAAA,AAAcN;;AAAd,AAQA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACf,AAIC,AAAAgC,AAAAC;AAAA,AAAA,AAAAC,AAAAF;AAAA,AAAA7B,AAAA+B,AAAA,AAAA,AAAME;AAAN,AAAAjC,AAAA+B,AAAA,AAAA,AAAmBG;AAAnBF,AAAAF;AAAA,AAAA9B,AAAAgC,AAAA,AAAA,AAAkCG;AAAlC,AAAAnC,AAAAgC,AAAA,AAAA,AAAoCI;AAApC,AACE,AAAME,AAAY,AAAA,AAACC,AAAYN;AAA/BI,AACkB,AAACrC,AAAIsC,AAAY,AAAA,AAAKF;AADxC,AAAApC,AAAAqC,AAAA,AAAA,AACOG;AADP,AAAAxC,AAAAqC,AAAA,AAAA,AACaI;AACPC,AAAY,AAAA,AAACC,AAAQ,AAACC,AAAoB,AAAA,AAAKJ,AAAO,AAAA,AAAKC,AAAMP;AACjEW,AAAY,AAAC1C,AAAmBqC,AAAMC;AAGtCK,AAAY,AAACC,AAAU,AAACC,AACC,AAAC3C,AAAO4C,AACR,AAAA,AAACC,AACHtC,AAAK8B;AAC5BS,AAAY,AAACJ,AAAU,AAACC,AACC,AAAC3C,AAAO+C,AACR,AAAA,AAACF,AACHtC,AAAK8B;AAblC,AAAA,AAAA,AAAA,AAAA,AAAA,AAckCG,AACAC,AACAK,AAEA,AAAA,AAAGN,AAAWC,AAAUK;;AAE9D,AAAA,AAAA,AAAA,AAAA,AAACtD,AAGC,AAAKwD;AAAL,AACE,AAAAC,AAAsF,AAAA,AAACI,AAAIL;AAA3FC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAAE,AAAAC,AAAAH,AAAAA;AAAA,AAAAI,AAAAJ,AAAA,AAAuBK;AAAvB,AAAAD,AAAAJ,AAAA,AAAkCM;AAAlC,AAAAF,AAAAJ,AAAA,AAAqDO;AAArD,AAAAH,AAAAJ,AAAA,AAAqEQ;AAQ/DC,AAAuB,AAAA,AAAGJ,AAAWC,AAAmBC;AAR9D,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAS8BC,AACAF,AACAC,AACAE,AAIA,AAAA,AAAGD,AAAeF,AAAmBC;;AAEvE,AAAA,AAAA,AAAA,AAAA,AAAChE,AAGC,AAAKC;AAAL,AACE,AAAMkE,AAAgB,AAAC5C,AAAM,AAACf,AAAOC,AAA+BR;AAC9DG,AAAgB,AAACC,AAAuBJ;AAD9C,AAEE,AAACK,AAAmB6D,AAAgB/D;;AAE1C,AAAA,AAAA,AAAA,AAAA,AAACJ,AAGC,AAAKC;AAAL,AACE,AAAK,AAACmE,AAAOnE","names":["day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.core.reg_sub","traces","start-of-epoch","cljs.core.nth","end-of-epoch","day8.re-frame-10x.tools.coll/last-in-vec","day8.re-frame-10x.tools.metamorphic/elapsed-time","p1__48498#","cljs.core.filter","day8.re-frame-10x.tools.metamorphic/request-animation-frame?","day8.re-frame-10x.tools.metamorphic/request-animation-frame-end?","frame-traces","cljs.core/count","var_args","G__48513","day8.re-frame-10x.panels.timing.subs/+nil","args-arr__4757__auto__","len__4736__auto__","i__4737__auto__","argseq__4758__auto__","cljs.core/IndexedSeq","seq48504","G__48505","cljs.core/first","cljs.core/next","G__48506","self__4723__auto__","x","y","more","cljs.core.reduce","cljs.core/+","p__48526","p__48527","vec__48528","vec__48531","af-start-end","epoch-traces","_","frame-number","vec__48534","frame-pairs","cljs.core.partition","start","end","af-traces","cljs.core.into","day8.re-frame-10x.tools.metamorphic/id-between-xf","total-time","subs-time","cljs.core.transduce","cljs.core.comp","day8.re-frame-10x.tools.metamorphic/subscription?","cljs.core.map","render-time","day8.re-frame-10x.tools.metamorphic/render?","match","map__48538","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","event-time","event-handler-time","event-dofx-time","event-run-time","remaining-interceptors","start-of-render","cljs.core/empty?"],"sourcesContent":["(ns day8.re-frame-10x.panels.timing.subs\n  (:require\n    [day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.core :as rf]\n    [day8.re-frame-10x.tools.metamorphic :as metam]\n    [day8.re-frame-10x.navigation.epochs.subs :as epochs.subs]\n    [day8.re-frame-10x.panels.traces.subs :as traces.subs]\n    [day8.re-frame-10x.tools.coll :as tools.coll]))\n\n(rf/reg-sub\n  ::total-epoch-time\n  :<- [::traces.subs/filtered-by-epoch-always]\n  (fn [traces]\n    (let [start-of-epoch (nth traces 0)\n          end-of-epoch   (tools.coll/last-in-vec traces)]\n      (metam/elapsed-time start-of-epoch end-of-epoch))))\n\n(rf/reg-sub\n  ::animation-frame-traces\n  :<- [::traces.subs/filtered-by-epoch-always]\n  (fn [traces]\n    (filter #(or (metam/request-animation-frame? %)\n                 (metam/request-animation-frame-end? %))\n            traces)))\n\n(rf/reg-sub\n  ::animation-frame-count\n  :<- [::animation-frame-traces]\n  (fn [frame-traces]\n    (count (filter metam/request-animation-frame? frame-traces))))\n\n(defn ^number +nil\n  \"Returns the sum of nums. (+) returns nil (not 0 like in cljs.core).\"\n  ([] nil)\n  ([x] x)\n  ([x y] (cljs.core/+ x y))\n  ([x y & more]\n   (reduce + (cljs.core/+ x y) more)))\n\n(rf/reg-sub\n  ::animation-frame-time\n  :<- [::animation-frame-traces]\n  :<- [::traces.subs/filtered-by-epoch-always]\n  (fn [[af-start-end epoch-traces] [_ frame-number]]\n    (let [frame-pairs (partition 2 af-start-end)\n          [start end] (nth frame-pairs (dec frame-number))\n          af-traces   (into [] (metam/id-between-xf (:id start) (:id end)) epoch-traces)\n          total-time  (metam/elapsed-time start end)\n          ;; TODO: these times double count renders/subs that happened as a child of another\n          ;; need to fix either here, at ingestion point, or most preferably in re-frame at tracing point.\n          subs-time   (transduce (comp\n                                   (filter metam/subscription?)\n                                   (map :duration))\n                                 +nil af-traces)\n          render-time (transduce (comp\n                                   (filter metam/render?)\n                                   (map :duration))\n                                 +nil af-traces)]\n      {:timing/animation-frame-total  total-time\n       :timing/animation-frame-subs   subs-time\n       :timing/animation-frame-render render-time\n       ;; TODO: handle rounding weirdness here, make sure it is never below 0.\n       :timing/animation-frame-misc   (- total-time subs-time render-time)})))\n\n(rf/reg-sub\n  ::event-processing-time\n  :<- [::epochs.subs/selected-match-state]\n  (fn [match]\n    (let [{:re-frame/keys [event-time event-handler-time event-dofx-time event-run-time]} (get match :timing)\n          ;; The scope of tracing is:\n          ;; event-run-time\n          ;;   event-time\n          ;;     event-handler-time\n          ;;     event-dofx-time\n          ;;     <other stuff>\n          ;;   <other stuff>\n          remaining-interceptors (- event-time event-handler-time event-dofx-time)]\n      {:timing/event-total        event-run-time\n       :timing/event-handler      event-handler-time\n       :timing/event-effects      event-dofx-time\n       :timing/event-interceptors remaining-interceptors\n       ;; TODO: look at splitting out interceptors from misc, there was a suspiciously high amount of time\n       ;; in misc on some events, so that needs to be investigated.\n       ; :timing/event-misc (- event-run-time event-time)\n       :timing/event-misc         (- event-run-time event-handler-time event-dofx-time)})))\n\n(rf/reg-sub\n  ::render-time\n  :<- [::traces.subs/filtered-by-epoch-always]\n  (fn [traces]\n    (let [start-of-render (first (filter metam/request-animation-frame? traces))\n          end-of-epoch    (tools.coll/last-in-vec traces)]\n      (metam/elapsed-time start-of-render end-of-epoch))))\n\n(rf/reg-sub\n  ::data-available?\n  :<- [::traces.subs/filtered-by-epoch-always]\n  (fn [traces]\n    (not (empty? traces))))\n\n"]}