{"version":3,"sources":["day8/re_frame_10x/fx/window.cljs"],"mappings":";AAOA,AAAA,AAAMA,AACHC;AADH,AAGO,AAACC,AAAO,AAAAC,AAAKG,AAKb,AAAA,AAACM;AALO,AAAA,AAAAR,AAAAD;AAAA,AAAAE,AAAAD,AAAA,AAAA,AAAUG;AAAV,AAAAF,AAAAD,AAAA,AAAA,AAAYI;AAAZ,AACE,AAAMD,AAAE,AAAI,AAAAE,AAAUF,AAAG,AAACG,AAAKH,AAAGA;AAC5BC,AAAE,AAAI,AAAAC,AAAUD,AAAG,AAACE,AAAKF,AAAGA;AADlC,AAEE,AAACG,AAAKL,AAAI,AAAA,AAAKC,AAAMC;AAJjCP,AACA;;AAOP;;;AAAA,AAAAY,AAAMM;AAAN,AAAA,AAAAL,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAAE,AAAAC,AAAAH,AAAAA;AAAA,AAAAI,AAAAJ,AAAA,AAEWM;AAFX,AAAAF,AAAAJ,AAAA,AAEiBO;AAFjB,AAAAH,AAAAJ,AAAA,AAEwBQ;AAFxB,AAAAJ,AAAAJ,AAAA,AAE4BS;AAF5B,AAAAL,AAAAJ,AAAA,AAEiCU;AAFjC,AAAAN,AAAAJ,AAAA,AAEyCW;AAFzC,AAAAP,AAAAJ,AAAA,AAEoDY;AAFpD,AAGE,AAAMC,AAAgBC;AAChBC,AAAgB,AAACC,AAAqB,AAAA,AAAuBH;AAC7DI,AAAgB,AAAA,AAAA,AACKF;AAErBG,AAAgB,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAChC,AACeoB,AACAC,AACAE,AACAD;AATtC,AAkBE,AAAAW,AAAW,AAAA,AAAA,AAACE,AAAmDH;AAA/D,AAAA,AAAAC;AAAA,AAAAA,AAASC;AAAT,AAEE,AAAME,AAAE,AAAYF;AAApB,AAQE,AAAOE;;AACP,AAAQA,AAAEL;;AACV,AAAA,AAACM,AAASH,AAAW,AAACI,AAAQd,AAAQU,AAAEE;;AACxC,AAAQA;;AACR,AAACG,AAAYd;;AACf,AAACc,AAAYb;;;AAEnB,AAAA,AAACc,AAECrB","names":["day8.re-frame-10x.fx.window/m->str","m","cljs.core.reduce","p__45465","vec__45467","cljs.core.nth","ret","k","v","cljs.core/Keyword","cljs.core/name","cljs.core.conj","clojure.string.join","p__45494","map__45498","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","day8.re-frame-10x.fx.window/open-debugger-window","width","height","top","left","on-load","on-success","on-failure","document-title","js/document.title","window-title","goog.string/escapeString","window-html","window-features","temp__5733__auto__","w","js/window.open","d","goog.object/set","cljs.core.partial","day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.core/dispatch","day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.core/reg-fx"],"sourcesContent":["(ns day8.re-frame-10x.fx.window\n  (:require\n    [goog.object                                                  :as gobj]\n    [goog.string                                                  :as gstring]\n    [clojure.string                                               :as string]\n    [day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.core :as rf]))\n\n(defn m->str\n  [m]\n  (->> m\n       (reduce (fn [ret [k v]]\n                 (let [k (if (keyword? k) (name k) k)\n                       v (if (keyword? v) (name v) v)]\n                   (conj ret (str k \"=\" v))))\n               [])\n       (string/join \",\")))\n\n(defn open-debugger-window\n  \"Originally copied from re-frisk.devtool/open-debugger-window\"\n  [{:keys [width height top left on-load on-success on-failure]}]\n  (let [document-title  js/document.title\n        window-title    (gstring/escapeString (str \"re-frame-10x | \" document-title))\n        window-html     (str \"<head><title>\"\n                             window-title\n                             \"</title></head><body style=\\\"margin: 0px;\\\"></body>\")\n        window-features (m->str\n                          {:width       width\n                           :height      height\n                           :left        left\n                           :top         top\n                           :resizable   :yes\n                           :scrollbars  :yes\n                           :status      :no\n                           :directories :no\n                           :toolbar     :no\n                           :menubar     :no})]\n    ;; We would like to set the windows left and top positions to match the monitor that it was on previously, but Chrome doesn't give us\n    ;; control over this, it will only position it within the same display that it was popped out on.\n    (if-let [w (js/window.open \"about:blank\" \"re-frame-10x-popout\" window-features)]\n\n      (let [d (.-document w)]\n        ;; We had to comment out the following unmountComponentAtNode as it causes a React exception we assume\n        ;; because React says el is not a root container that it knows about.\n        ;; In theory by not freeing up the resources associated with this container (e.g. event handlers) we may be\n        ;; creating memory leaks. However with observation of the heap in developer tools we cannot see any significant\n        ;; unbounded growth in memory usage.\n        ;(when-let [el (.getElementById d \"--re-frame-10x--\")]\n        ;  (r/unmount-component-at-node el)))\n        (.open d)\n        (.write d window-html)\n        (gobj/set w \"onload\" (partial on-load w d))\n        (.close d)\n        (rf/dispatch on-success))\n      (rf/dispatch on-failure))))\n\n(rf/reg-fx\n  ::open-debugger-window\n  open-debugger-window)"]}