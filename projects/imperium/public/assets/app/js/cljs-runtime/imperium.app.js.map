{"version":3,"sources":["imperium/app.cljs"],"mappings":"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","names":["akiroz.re-frame.storage/reg-co-fx!","re-frame.core/reg-cofx","cofx","_","cljs.core.assoc","cljs.core/random-uuid","re-frame.core/reg-fx","p__50301","vec__50302","cljs.core.nth","action","value","G__50305","cljs.core/Keyword","imperium.client-beta/start!","imperium.client-beta/send!","cljs.core.println","re_frame.core.reg_event_fx","re_frame.core.inject_cofx","temp__5733__auto__","user","cljs.core.get_in","p__50307","vec__50308","new-name","map__50311","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","p1__50306#","db","local","update","cljs.core/assoc-in","re_frame.core.reg_event_db","p__50313","vec__50314","p__50317","vec__50318","cljs.core.dissoc","re_frame.core.reg_sub","cljs.core/deref","p1__50321#","imperium.app/text-input","atom","cljs.core/reset!","imperium.app/user-input","reagent.core.atom","re-frame.core/dispatch","imperium.app/ui","re_frame.core.subscribe","name","imperium.app/render","reagent.dom.render","js/document.getElementById","imperium.app/stop","imperium.app/start","re-frame.core/clear-subscription-cache!","imperium.app/init","re-frame.core/dispatch-sync"],"sourcesContent":["(ns imperium.app\n  (:require-macros [cljs.core.async.macros :as asyncm :refer (go go-loop)])\n  (:require [reagent.dom]\n            [reagent.core :as reagent]\n            [re-frame.core :as rf]\n            [akiroz.re-frame.storage :as storage]\n            [imperium.client-beta :as client]))\n\n;; Coeffects ====================================================\n\n(storage/reg-co-fx! :imperium {:fx :local :cofx :local})\n\n(rf/reg-cofx\n :uuid\n (fn [cofx _]\n   (assoc cofx :uuid (random-uuid))))\n\n;; Effect =======================================================\n\n(rf/reg-fx\n :websocket\n (fn [[action value]]\n   (case action\n     :ws/start (client/start! value)\n     :ws/send (client/send!  value)\n     (println (str \"Unrecognized action: \" action)))))\n\n;; Event Dispatch ====================================================\n\n;; Interceptors ==========================================\n\n;; Event Handlers ====================================================\n\n(rf/reg-event-fx\n :initialize\n [(rf/inject-cofx :local) (rf/inject-cofx :uuid)]\n (fn [cofx _]\n   (if-let [user (get-in cofx [:local :user])]\n     {:db {:user user}\n      :dispatch [:connect nil]}\n     (let [user {:uuid (:uuid cofx)}]\n       {:db {:user user}\n        :local {:user user}\n        :dispatch [:connect nil]}))))\n\n(rf/reg-event-fx\n :connect\n (fn [cofx _]\n   (if-let [user (get-in cofx [:db :user])]\n     {:websocket [:ws/start (:uuid user)]}\n     {})))\n\n(rf/reg-event-fx\n :send\n (fn [cofx _]\n   {:websocket [:ws/send {:type :ws :content \"blah\"}]}))\n\n(rf/reg-event-fx\n :save-name\n [(rf/inject-cofx :local)]\n (fn [cofx [_ new-name]]\n   (let [{:keys [db local]} cofx\n         update #(assoc-in % [:user :name] new-name)]\n     {:db (update db)\n      :local (update local)})))\n\n(rf/reg-event-db\n :connected\n (fn [db [_ _]]\n   (assoc db :connected true)))\n\n(rf/reg-event-db\n :disconnected\n (fn [db [_ _]]\n   (dissoc db :connected)))\n\n;; Query ====================================================\n\n(rf/reg-sub\n :user/uuid\n (fn [db _] (get-in db [:user :uuid])))\n\n(rf/reg-sub\n :user/name\n (fn [db _] (get-in db [:user :name])))\n\n;; View ====================================================\n\n(defn text-input [atom]\n  [:input {:type \"text\" :value @atom :on-change #(reset! atom (-> % .-target .-value))}])\n\n(defn user-input []\n  (let [atom (reagent/atom \"\")]\n    [:div\n     [:label \"Name: \"]\n     [text-input atom]\n     [:input {:type \"button\" :value \"Set\" :on-click #(rf/dispatch [:save-name @atom])}]]))\n\n(defn ui []\n  [:div\n   [:div (str \"Uuid: \" @(rf/subscribe [:user/uuid]))]\n   (if-let [name @(rf/subscribe [:user/name])]\n     [:div \"Name: \" name]\n     [user-input])\n   [:input {:type \"button\" :value \"Connect\" :on-click #(rf/dispatch [:connect])}]\n   [:input {:type \"button\" :value \"send\" :on-click #(rf/dispatch [:send])}]])\n\n(defn render []\n  (reagent.dom/render [ui]\n                      (js/document.getElementById \"app\")))\n\n;; Init ====================================================\n\n(defn ^:dev/before-load stop [])\n\n(defn ^:dev/after-load start []\n  (rf/clear-subscription-cache!)\n  (render))\n\n(defn init []\n  (rf/dispatch-sync [:initialize])\n  (render))"]}