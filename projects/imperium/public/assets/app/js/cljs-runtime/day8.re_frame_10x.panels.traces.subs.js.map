{"version":3,"sources":["day8/re_frame_10x/panels/traces/subs.cljs"],"mappings":"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","names":["day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.core.reg_sub","p__46291","map__46292","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","traces","_","p__46297","map__46298","categories","p__46301","map__46302","queries","p__46305","map__46306","expansions","p__46312","map__46313","all","cljs.core/count","p__46317","map__46318","filter-by-selected-epoch?","p__46324","vec__46325","cljs.core.nth","beginning","ending","cljs.core.into","day8.re-frame-10x.tools.coll/id-between-xf","p__46328","vec__46329","filtered","cljs.core/not","p__46332","vec__46333","namespaces","munged-namespaces","cljs.core.map","cljs.core.comp","cljs.core/munge","cljs.core/set","cljs.core.remove","trace","day8.re-frame-10x.tools.metamorphic/render?","cljs.core/contains?","cljs.core.subs","clojure.string.last_index_of","cljs.core._EQ_","cljs.core.get_in","p__46341","vec__46342","cljs.core/seq","cljs.core.filter","day8.re-frame-10x.panels.traces.subs/query->fn","query","clojure.string/includes?","clojure.string/lower-case","p__46345","vec__46346","cljs.core/every-pred","cljs.core.sort_by","p__46350","map__46351","draft-query-type","or__4126__auto__","p__46356","map__46357","draft-query","p__46359","map__46360","draft-query-error"],"sourcesContent":["(ns day8.re-frame-10x.panels.traces.subs\n  (:require\n    [clojure.string :as string]\n    [day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.core :as rf]\n    [day8.re-frame-10x.tools.metamorphic :as metam]\n    [day8.re-frame-10x.navigation.epochs.subs :as epochs.subs]\n    [day8.re-frame-10x.panels.settings.subs :as settings.subs]\n    [day8.re-frame-10x.tools.coll :as tools.coll]))\n\n(rf/reg-sub\n  ::root\n  (fn [{:keys [traces]} _]\n    traces))\n\n(rf/reg-sub\n  ::categories\n  :<- [::root]\n  (fn [{:keys [categories]} _]\n    categories))\n\n(rf/reg-sub\n  ::queries\n  :<- [::root]\n  (fn [{:keys [queries]} _]\n    queries))\n\n(rf/reg-sub\n  ::expansions\n  :<- [::root]\n  (fn [{:keys [expansions]} _]\n    expansions))\n\n(rf/reg-sub\n  ::all\n  :<- [::root]\n  (fn [{:keys [all]} _]\n    all))\n\n(rf/reg-sub\n  ::count\n  :<- [::all]\n  (fn [traces _]\n    (count traces)))\n\n(rf/reg-sub\n  ::filter-by-selected-epoch?\n  :<- [::root]\n  (fn [{:keys [filter-by-selected-epoch?]} _]\n    filter-by-selected-epoch?))\n\n(rf/reg-sub\n  ::filtered-by-epoch-always\n  :<- [::all]\n  :<- [::epochs.subs/beginning-trace-id]\n  :<- [::epochs.subs/ending-trace-id]\n  (fn [[traces beginning ending] _]\n    (into [] (tools.coll/id-between-xf beginning ending) traces)))\n\n(rf/reg-sub\n  ::filtered-by-epoch\n  :<- [::filter-by-selected-epoch?]\n  :<- [::all]\n  :<- [::filtered-by-epoch-always]\n  (fn [[filter-by-selected-epoch? all filtered] _]\n    (if-not filter-by-selected-epoch?\n      all\n      filtered)))\n\n(rf/reg-sub\n  ::filtered-by-namespace\n  :<- [::filtered-by-epoch]\n  :<- [::settings.subs/filtered-view-trace]\n  (fn [[traces namespaces] _]\n    (let [munged-namespaces (->> namespaces\n                                 (map (comp munge :ns-str))\n                                 (set))]\n      (into []\n            ;; Filter out view namespaces we don't care about.\n            (remove\n              (fn [trace] (and (metam/render? trace)\n                               (contains? munged-namespaces (subs (:operation trace) 0 (string/last-index-of (:operation trace) \".\"))))))\n            traces))))\n\n(rf/reg-sub\n  ::filtered-by-cached-subscriptions\n  :<- [::filtered-by-namespace]\n  (fn [traces _]\n    ;; Remove cached subscriptions. Could add this back in as a setting later\n    ;; but it's pretty low signal/noise 99% of the time.\n    (remove (fn [trace] (and (= :sub/create (:op-trace trace))\n                             (get-in trace [:tags :cached?])))\n            traces)))\n\n(rf/reg-sub\n  ::filtered-by-categories\n  :<- [::filtered-by-cached-subscriptions]\n  :<- [::categories]\n  (fn [[traces categories] _]\n    (if-not (seq categories)\n      traces\n      (filter (fn [trace] (when (contains? categories (:op-type trace)) trace)) traces))))\n\n(defn query->fn [query]\n  (if (= :contains (:filter-type query))\n    (fn [trace]\n      (string/includes? (string/lower-case (str (:operation trace) \" \" (:op-type trace)))\n                        (:query query)))\n    (fn [trace]\n      (< (:query query) (:duration trace)))))\n\n(rf/reg-sub\n  ::filtered-by-queries\n  :<- [::filtered-by-categories]\n  :<- [::queries]\n  (fn [[traces queries] _]\n    (if-not (seq queries)\n      traces\n      (filter (apply every-pred (map query->fn queries)) traces))))\n\n(rf/reg-sub\n  ::sorted\n  :<- [::filtered-by-queries]\n  (fn [traces _]\n    (sort-by :id traces)))\n\n(rf/reg-sub\n  ::draft-query-type\n  :<- [::root]\n  (fn [{:keys [draft-query-type]} _]\n    (or draft-query-type :contains)))\n\n(rf/reg-sub\n  ::draft-query\n  :<- [::root]\n  (fn [{:keys [draft-query]} _]\n    draft-query))\n\n(rf/reg-sub\n  ::draft-query-error\n  :<- [::root]\n  (fn [{:keys [draft-query-error]} _]\n    draft-query-error))"]}