{"version":3,"sources":["day8/re_frame_10x/panels/event/views.cljs"],"mappings":"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","names":["var_args","G__50408","day8.re-frame-10x.panels.event.views/re-seq-idx","js/Error","re","s","day8.re_frame_10x.panels.event.views.re_seq_idx","offset","temp__5739__auto__","matches","match-str","match-vals","cljs.core/vec","match-index","cljs.core/cons","cljs.core/LazySeq","post-idx","x__4214__auto__","y__4215__auto__","cljs.core.subs","day8.re-frame-10x.panels.event.views/collapse-whitespace-and-index","s'","clojure.string/replace","v","i-s","i-s'","cljs.core._EQ_","cljs.core.conj","cljs.core/count","cljs.core.nth","day8.re-frame-10x.panels.event.views/find-bounds","form-str","search-str","num-seen","vec__50415","reindex","esc-str","js/goog.string.regExpEscape","regex","cljs.core/re-pattern","results","and__4115__auto__","cljs.core/seq","vec__50419","vec__50422","result","_","pre-match","matched-form","index","start","stop","G__50425","clojure.string.index_of","cljs.core.pr_str","length","end","G__50426","day8.re-frame-10x.panels.event.views/code-style-factory$","style-name50427","params50428","base-style50432","key__47223__auto__","cljs.core/meta","cljs.core/first","name50431","fexpr__50433","day8.re-frame-10x.inlined-deps.spade.v1v1v0.spade.util/build-style-name","style50430","cljs.core.into","day8.re-frame-10x.inlined-deps.spade.v1v1v0.spade.runtime/compile-css","factory-name50429","day8.re-frame-10x.inlined-deps.spade.v1v1v0.spade.util/factory->name","day8.re-frame-10x.inlined-deps.spade.v1v1v0.spade.runtime/ensure-style!","day8.re-frame-10x.panels.event.views/code-style","ambiance","syntax-color-scheme","show-all-code?","day8.re-frame-10x.styles/hljs","day8.re-frame-10x.inlined-deps.garden.v1v3v10.garden.units/px","day8.re-frame-10x.styles/gs-5","day8.re-frame-10x.panels.event.views/code","scroll-pos","cljs.core.atom","day8.re_frame_10x.inlined_deps.reagent.v1v0v0.reagent.core.create_class","this","old-argv","new-argv","node","day8.re-frame-10x.inlined-deps.reagent.v1v0v0.reagent.dom/dom-node","cljs.core/reset!","cljs.core/deref","vec__50436","day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.core.subscribe","highlighted-form","start-index","end-index","before","highlight","after","cljs.core.gensym","day8.re-frame-10x.components.re-com/box","event","day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.core/dispatch","cljs.core/not","re-highlight.core/highlight","cljs.core/List","day8.re-frame-10x.panels.event.views/clipboard-notification-style-factory$","style-name50439","params50440","base-style50444","name50443","fexpr__50445","style50442","factory-name50441","day8.re-frame-10x.panels.event.views/clipboard-notification-style","day8.re-frame-10x.styles/nord6","day8.re-frame-10x.styles/nord12","day8.re-frame-10x.inlined-deps.garden.v1v3v10.garden.units/ms","day8.re-frame-10x.panels.event.views/clipboard-notification","repl-msg-state","cljs.core.get","day8.re-frame-10x.panels.event.views/copy-button-style-factory$","style-name50446","params50447","base-style50451","name50450","fexpr__50452","style50449","factory-name50448","day8.re-frame-10x.panels.event.views/copy-button-style","day8.re-frame-10x.styles/nord-ghost-white","day8.re-frame-10x.styles/nord1","day8.re-frame-10x.panels.event.views/controls-style-factory$","style-name50453","params50454","base-style50458","name50457","fexpr__50459","style50456","factory-name50455","day8.re-frame-10x.panels.event.views/controls-style","day8.re-frame-10x.panels.event.views/controls","execution-order?","day8.re-frame-10x.components.re-com/h-box","day8.re-frame-10x.components.inputs/checkbox","day8.re-frame-10x.components.buttons/icon","day8.re-frame-10x.material/content-copy","day8.re-frame-10x.fx.clipboard/copy!","day8.re-frame-10x.components.re-com/gap-f","day8.re-frame-10x.styles/gs-7s","day8.re-frame-10x.components.hyperlinks/info","day8.re-frame-10x.panels.event.views/indent-block-style-factory$","style-name50460","params50461","base-style50465","name50464","fexpr__50466","style50463","factory-name50462","day8.re-frame-10x.panels.event.views/indent-block-style","first?","day8.re-frame-10x.styles/colors-2","day8.re-frame-10x.styles/nord4","day8.re-frame-10x.styles/nord3","day8.re-frame-10x.panels.event.views/indent-block","indent-level","iter__4529__auto__","s__50468","temp__5735__auto__","cljs.core/chunked-seq?","c__4527__auto__","size__4528__auto__","b__50470","cljs.core/chunk-buffer","i__50469","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__50467","cljs.core/chunk-rest","cljs.core/rest","i","cljs.core.range","day8.re-frame-10x.styles/gs-12s","day8.re-frame-10x.panels.event.views/fragment-header-style-factory$","style-name50471","params50472","base-style50476","name50475","fexpr__50477","style50474","factory-name50473","day8.re-frame-10x.panels.event.views/fragment-header-style","day8.re-frame-10x.styles/frame-1","day8.re-frame-10x.styles/gs-19","day8.re-frame-10x.styles/gs-2","day8.re-frame-10x.styles/nord10","day8.re-frame-10x.styles/gs-7","day8.re-frame-10x.styles/nord2","p__50481","map__50482","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","day8.re-frame-10x.panels.event.views/fragment-header","id","form","frag","trace-id","open?-path","max-column-width","open?","cljs.core.get_in","line-str","day8.re_frame_10x.tools.pretty_print_condensed.pr_str_truncated","=>str","result-length","day8.re-frame-10x.components.buttons/expansion","day8.re-frame-10x.styles/gs-19s","day8.re-frame-10x.panels.event.views/fragment-body-style-factory$","style-name50492","params50493","base-style50497","name50496","fexpr__50498","style50495","factory-name50494","day8.re-frame-10x.panels.event.views/fragment-body-style","day8.re-frame-10x.styles/code","p__50500","map__50501","day8.re-frame-10x.panels.event.views/fragment-body","day8.re-frame-10x.components.cljs-devtools/simple-render","day8.re-frame-10x.panels.event.views/fragment-style-factory$","style-name50509","params50510","base-style50514","name50513","fexpr__50516","style50512","factory-name50511","day8.re-frame-10x.panels.event.views/fragment-style","p__50522","map__50523","day8.re-frame-10x.panels.event.views/fragment","code-open?","day8.re-frame-10x.components.re-com/v-box","day8.re-frame-10x.panels.event.views/fragments-style-factory$","style-name50530","params50531","base-style50535","name50534","fexpr__50536","style50533","factory-name50532","day8.re-frame-10x.panels.event.views/fragments-style","day8.re-frame-10x.panels.event.views/fragments","fragments","max-fragments","s__50541","b__50543","i__50542","iter__50540","cljs.core.take","day8.re-frame-10x.components.re-com/label","day8.re-frame-10x.panels.event.views/instructions","day8.re-frame-10x.components.re-com/p","day8.re-frame-10x.components.re-com/hyperlink-href","day8.re-frame-10x.panels.event.views/panel","epoch-id","exists?","cljs.core/chunk-first"],"sourcesContent":["(ns day8.re-frame-10x.panels.event.views\n  (:require-macros\n    [day8.re-frame-10x.components.re-com :refer [handler-fn]])\n  (:require\n    [clojure.string :as string]\n    [re-highlight.core :as re-highlight]\n    [\"highlight.js/lib/languages/clojure\"]\n    [day8.re-frame-10x.inlined-deps.garden.v1v3v10.garden.units :refer [px ms]]\n    [day8.re-frame-10x.inlined-deps.spade.v1v1v0.spade.core :refer [defclass]]\n    [day8.re-frame-10x.inlined-deps.reagent.v1v0v0.reagent.core :as r]\n    [day8.re-frame-10x.inlined-deps.reagent.v1v0v0.reagent.dom :as rdom]\n    [day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.core :as rf]\n    [day8.re-frame-10x.components.re-com :as rc]\n    [day8.re-frame-10x.styles :as styles]\n    [day8.re-frame-10x.panels.settings.subs :as settings.subs]\n    [day8.re-frame-10x.navigation.epochs.subs :as epochs.subs]\n    [day8.re-frame-10x.material :as material]\n    [day8.re-frame-10x.fx.clipboard :as clipboard]\n    [day8.re-frame-10x.panels.event.subs :as event.subs]\n    [day8.re-frame-10x.panels.event.events :as event.events]\n    [day8.re-frame-10x.components.cljs-devtools :as cljs-devtools]\n    [day8.re-frame-10x.tools.pretty-print-condensed :as pp]\n    [day8.re-frame-10x.components.inputs :as inputs]\n    [day8.re-frame-10x.components.buttons :as buttons]\n    [day8.re-frame-10x.components.hyperlinks :as hyperlinks]))\n\n;; Terminology:\n;; Form: a single Clojure form (may have nested children)\n;; Result: the result of execution of a single form\n;; Fragment: the combination of a form and result\n;; Listing: a block of traced Clojure code, e.g. an event handler function\n\n(defn- re-seq-idx\n  \"Like re-seq but returns matches and indices\"\n  ([re s] (re-seq-idx re s 0))\n  ([re s offset]  ;; copied from re-seq* impl https://github.com/clojure/clojurescript/blob/0efe8fede9e06b8e1aa2fcb3a1c70f66cad6392e/src/main/cljs/cljs/core.cljs#L10014\n   (when-some [matches (.exec re s)]\n     (let [match-str (aget matches 0)\n           match-vals (if (== (.-length matches) 1)\n                        match-str\n                        (vec matches))\n           match-index (.-index matches)]\n       (cons [match-vals, (+ offset match-index)]\n             (lazy-seq\n               (let [post-idx (+ (.-index matches)\n                                 (max 1 (.-length match-str)))]\n                 (when (<= post-idx (.-length s))\n                   (re-seq-idx re (subs s post-idx) (+ offset post-idx))))))))))\n\n(defn collapse-whitespace-and-index\n  \"given a string argument `s` it will return a vector of two values:\n     - a modified version of `s`, call it s'\n     - a vector of indexes, v\n   s' will be a copy of s in which all consecutive whitespace is collapsed to one whitespace\n   v  will be a vector of index for characters in s' back to the original s\n   For example:\n      (collapse-whitespace-and-index \\\"a b  c\\\")\n   will return\n       [\\\"a b c\\\" [0 1 2 3 5]]     ;; notice that the 4 is not there\n   \"\n  [s]\n  (let [s' (clojure.string/replace s #\"\\s+\" \" \") ;; generate a new string with whitespace replaced\n        v (loop [v []     ;; Build up an index between the string with and without whitespace\n                 i-s 0\n                 i-s' 0]\n            (cond\n              (= (count s') i-s')           (conj v (count s)) ;; we have reached the end of both strings\n              (= (nth s i-s) (nth s' i-s')) (recur (conj v i-s) (inc i-s) (inc i-s')) ;; when we have a match save the index\n              :else                         (recur v (inc i-s) i-s')))]    ;; no match (whitespace) increment the index on the orignal string\n    [s' v]))\n\n(defn find-bounds\n  \"Try and find the bounds of the form we are searching for. Uses some heuristics to\n  try and avoid matching partial forms, e.g. 'default-|weeks| for the form 'weeks.\"\n  [form-str search-str num-seen]\n  (if (nil? search-str)\n    [0 0]  ;; on mouse out etc\n    (let [[form-str reindex]   (collapse-whitespace-and-index form-str) ;; match without whitespace\n          esc-str    (goog.string.regExpEscape search-str)\n          regex      (str \"(\\\\s|\\\\(|\\\\[|\\\\{)\" \"(\" esc-str \")(\\\\s|\\\\)|\\\\]|\\\\})\")\n          re         (re-pattern regex)\n          results    (re-seq-idx re form-str)]\n      ;; (js/console.log \"FIND-BOUNDS\" form-str  regex reindex results)\n      (if (and search-str num-seen (seq results) (>= (count results)  num-seen))\n        (let [result                              (nth results (dec num-seen))\n              [[_ pre-match matched-form] index]  result\n              index                               (+ index (count pre-match))\n              start                               (nth reindex index)\n              stop                                (nth reindex (+ index (count matched-form)))]\n          [start stop])\n        ;; If the regex fails, fall back to string index just in case.\n        (let [start  (some->> form-str\n                              (string/index-of (pr-str search-str))\n                              (nth reindex))\n              length (if (some? start)\n                       (count (pr-str search-str))\n                       1)\n              end    (some->> start\n                              (+ length)\n                              (nth reindex))]\n          [start end])))))\n\n(defclass code-style\n  [ambiance syntax-color-scheme show-all-code?]\n  {:composes      (styles/hljs ambiance syntax-color-scheme)\n   :max-height    (when-not show-all-code? (px (* 10 17)))  ;; Add scrollbar after 10 lines\n   :padding       styles/gs-5\n   :overflow      :auto\n   :white-space   :pre\n   :margin-right  styles/gs-5}) ;; TODO: This is a quick fix for issue #270\n\n(defn code\n  []\n  (let [scroll-pos (atom {:top 0 :left 0})]\n    (r/create-class\n      {:display-name \"code\"\n\n       :get-snapshot-before-update\n                     (fn code-get-snapshot-before-update\n                       [this old-argv new-argv]\n                       (let [node (rdom/dom-node this)]\n                         (reset! scroll-pos {:top (.-scrollTop node) :left (.-scrollLeft node)})))\n\n       :component-did-update\n                     (fn code-component-did-update\n                       [this]\n                       (let [node (rdom/dom-node this)]\n                         (set! (.-scrollTop node) (:top @scroll-pos))\n                         (set! (.-scrollLeft node) (:left @scroll-pos))))\n\n       :reagent-render\n                     (fn\n                       []\n                       (let [ambiance            @(rf/subscribe [::settings.subs/ambiance])\n                             syntax-color-scheme @(rf/subscribe [::settings.subs/syntax-color-scheme])\n                             highlighted-form    @(rf/subscribe [::event.subs/highlighted-form])\n                             form-str            @(rf/subscribe [::event.subs/zprint-form-for-epoch])\n                             show-all-code?      @(rf/subscribe [::event.subs/show-all-code?])\n                             [start-index end-index] (find-bounds form-str (:form highlighted-form) (:num-seen highlighted-form))\n                             before              (subs form-str 0 start-index)\n                             highlight           (subs form-str start-index end-index)\n                             after               (subs form-str end-index)]\n                         ; DC: We get lots of React errors if we don't force a creation of a new element when the highlight changes. Not really sure why...\n                         ;; Possibly relevant? https://stackoverflow.com/questions/21926083/failed-to-execute-removechild-on-node\n                         ^{:key (gensym)}\n                         [rc/box\n                          :class (code-style ambiance syntax-color-scheme show-all-code?)\n                          :attr {:on-double-click (handler-fn (rf/dispatch [::event.events/set-show-all-code? (not show-all-code?)]))}\n                          :child (if (some? highlighted-form)\n                                   [re-highlight/highlight {:language \"clojure\"}\n                                    (list ^{:key \"before\"} before\n                                          ^{:key \"hl\"} [:span.code-listing--highlighted highlight]\n                                          ^{:key \"after\"} after)]\n                                   [re-highlight/highlight {:language \"clojure\"}\n                                    form-str])]))})))\n\n(defclass clipboard-notification-style\n  [ambiance]\n  {:opacity            0\n   :color              styles/nord6\n   :background-color   styles/nord12\n   :padding            [[0 styles/gs-5]]\n   :white-space        :nowrap\n   :overflow           :hidden\n   :animation-duration (ms 5000)\n   :animation-name     :fade-clipboard-msg-re-frame-10x})\n\n(defn clipboard-notification\n  []\n  (let [ambiance       @(rf/subscribe [::settings.subs/ambiance])\n        repl-msg-state @(rf/subscribe [::event.subs/repl-msg-state])]\n    (when (get #{:running :re-running} repl-msg-state)\n      [:div\n       {:class            (clipboard-notification-style ambiance)\n        :on-animation-end #(rf/dispatch [::event.events/repl-msg-state :end])}\n       \"Clipboard now contains text for pasting into your REPL\"])))\n\n(defclass copy-button-style\n  [ambiance]\n  {:background-color (if (= :bright ambiance) styles/nord-ghost-white styles/nord1)\n   :border-top :none\n   :border-bottom :none\n   :border-right :none})\n\n(defclass controls-style\n  [ambiance]\n  {:margin-right styles/gs-5})\n\n(defn controls\n  []\n  (let [ambiance         @(rf/subscribe [::settings.subs/ambiance])\n        execution-order? @(rf/subscribe [::event.subs/execution-order?])]\n    [rc/h-box\n     :class    (controls-style ambiance)\n     :align    :center\n     :children\n     [[inputs/checkbox\n       {:model     execution-order?\n        :on-change (handler-fn (rf/dispatch [::event.events/set-execution-order (not execution-order?)]))\n        :label     \"show trace in execution order\"}]\n      [rc/box\n       :size  \"1\"\n       :child \"\"]\n      [clipboard-notification]\n      [rc/box\n       :size  \"1\"\n       :child \"\"]\n      [buttons/icon\n       {:icon     [material/content-copy]\n        :label    \"requires\"\n        :title    \"Copy to the clipboard, the require form to set things up for the \\\"repl\\\" links below\"\n        ;; Doing this in a list would be nicer, but doesn't let us use ' as it will be expanded before we can create the string.\n        :on-click #(do (clipboard/copy! \"(require '[day8.re-frame-10x])\")\n                       (rf/dispatch [::event.events/repl-msg-state :start]))}]\n      [rc/gap-f :size styles/gs-7s]\n      [hyperlinks/info \"https://github.com/day8/re-frame-10x/blob/master/docs/HyperlinkedInformation/UsingTheRepl.md\"]]]))\n\n(defclass indent-block-style\n  [ambiance first?]\n  {:composes    (styles/colors-2 ambiance)\n   :border-left [[(px 1) :solid (if (= :bright ambiance) styles/nord4 styles/nord3)]]\n   :border-top  (when first? [[(px 1) :solid (if (= :bright ambiance) styles/nord4 styles/nord3)]])})\n\n(defn indent-block\n  [indent-level first?]\n  (let [ambiance @(rf/subscribe [::settings.subs/ambiance])]\n    [rc/h-box\n     :children\n     (into []\n           (for [i (range indent-level)]\n             [rc/box\n              :width styles/gs-12s\n              :class (indent-block-style ambiance first?)\n              :child \"\"]))]))\n\n(defclass fragment-header-style\n  [ambiance first?]\n  {:composes   (styles/frame-1 ambiance)\n   :height     styles/gs-19\n   :margin-top (when-not first? (px -1))}\n  [:.code\n   {:margin-left styles/gs-2\n    :white-space :nowrap}]\n  [:.result\n   {:color       styles/nord10\n    :flex        \"1\"\n    :margin-left styles/gs-7\n    :overflow    :hidden\n    :white-space :nowrap\n    :visibility  :hidden}]\n  [:&:hover\n   {:background-color (if (= :bright ambiance) styles/nord6 styles/nord2)}\n   [:.result\n    {:visibility :visible}]])\n\n(defn fragment-header\n  [{:keys [id form result] :as frag}]\n  (let [ambiance         @(rf/subscribe [::settings.subs/ambiance])\n        trace-id         @(rf/subscribe [::event.subs/trace-id-for-epoch])\n        open?-path       [@(rf/subscribe [::epochs.subs/selected-epoch-id]) trace-id id]\n        max-column-width @(rf/subscribe [::event.subs/max-column-width])\n        open?            (get-in @(rf/subscribe [::event.subs/code-open?]) open?-path)\n        line-str         (pp/pr-str-truncated max-column-width form)\n        =>str            \"=> \"\n        result-length    (- max-column-width (count =>str) (count line-str))\n        first?           (zero? id)]\n    [rc/h-box\n     :class    (fragment-header-style ambiance first?)\n     :size     \"1\"\n     :align    :center\n     :children\n     [[rc/box\n       :attr  {:on-click (handler-fn (rf/dispatch [::event.events/set-code-visibility open?-path (not open?)]))}\n       :child\n       [buttons/expansion\n        {:open? open?\n         :size  styles/gs-19s}]]\n      [rc/h-box\n       :size     \"1\"\n       :children\n       [[rc/box\n         :class \"code\"\n         :child\n         [:code line-str]]\n        [rc/box\n         :class \"result\"\n         :child\n         [:code =>str (when (pos? result-length)\n                        (pp/pr-str-truncated result-length result))]]]]\n      [rc/box\n       :width styles/gs-19s\n       :child\n       [buttons/icon\n        {:class    (copy-button-style ambiance)\n         :icon     [material/content-copy {:size \"14px\"}]\n         :title    \"Copy to the clipboard, an expression that will return this form's value in the cljs repl\"\n         :on-click (handler-fn (do (clipboard/copy! (pr-str (list 'day8.re-frame-10x/traced-result trace-id frag)))\n                                   (rf/dispatch [::event.events/repl-msg-state :start])))}]]]]))\n\n(defclass fragment-body-style\n  [ambiance syntax-color-scheme]\n  {:composes   (styles/code ambiance syntax-color-scheme)\n   :overflow-x :auto\n   :overflow-y :hidden\n   :padding    styles/gs-5})\n\n(defn fragment-body\n  [{:keys [id result]}]\n  (let [ambiance            @(rf/subscribe [::settings.subs/ambiance])\n        syntax-color-scheme @(rf/subscribe [::settings.subs/syntax-color-scheme])\n        trace-id            @(rf/subscribe [::event.subs/trace-id-for-epoch])]\n    [rc/box\n     :size  \"1\"\n     :class (fragment-body-style ambiance syntax-color-scheme)\n     :child\n     [cljs-devtools/simple-render\n      result\n      [@(rf/subscribe [::epochs.subs/selected-epoch-id]) trace-id id]]]))\n\n(defclass fragment-style\n  [ambiance]\n  {})\n\n(defn fragment\n  [{:keys [id indent-level] :as frag}]\n  (let [ambiance   @(rf/subscribe [::settings.subs/ambiance])\n        code-open? @(rf/subscribe [::event.subs/code-open?])\n        trace-id   @(rf/subscribe [::event.subs/trace-id-for-epoch])\n        first?     (zero? id)]\n    [rc/v-box\n     :class (fragment-style ambiance)\n     :attr  {:on-mouse-enter (handler-fn (rf/dispatch [::event.events/hover-form frag]))\n             :on-mouse-leave (handler-fn (rf/dispatch [::event.events/exit-hover-form frag]))}\n     :children\n     [[rc/h-box\n       :children\n       [[indent-block indent-level first?]\n        [fragment-header frag]]]\n      (when (get-in code-open? [@(rf/subscribe [::epochs.subs/selected-epoch-id]) trace-id id])\n        [rc/h-box\n         :children\n         [[indent-block indent-level false]\n          [fragment-body frag]]])]]))\n\n(defclass fragments-style\n  [ambiance]\n  {:overflow-y :auto\n   :margin-right styles/gs-5})\n\n(defn fragments\n  []\n  (let [ambiance      @(rf/subscribe [::settings.subs/ambiance])\n        fragments     @(rf/subscribe [::event.subs/fragments-for-epoch])\n        max-fragments 50]\n    [rc/v-box\n     :size     \"1\"\n     :class    (fragments-style ambiance)\n     :children\n     [(into [:<>]\n            (for [frag (take max-fragments fragments)]\n              [fragment frag]))\n      (when (> (count fragments) max-fragments)\n        [rc/label\n         :label (str \"(only showing first \" max-fragments \" of \" (count fragments) \" traces)\")])]]))\n\n(defn instructions\n  []\n  [rc/v-box\n   :children\n   [[rc/p \"Code trace is not available for this event\"]\n    [:br]\n    [rc/hyperlink-href\n     :label  \"Instructions for enabling Event Code Tracing\"\n     :attr   {:rel \"noopener noreferrer\"}\n     :target \"_blank\"\n     :href   \"https://github.com/day8/re-frame-10x/blob/master/docs/HyperlinkedInformation/EventCodeTracing.md\"]]])\n\n(defn panel\n  []\n  (let [epoch-id @(rf/subscribe [::epochs.subs/selected-epoch-id])\n        exists?  @(rf/subscribe [::event.subs/code-for-epoch-exists?])]\n    ;; Create a new id on each panel because Reagent can throw an exception if\n    ;; the data provided in successive renders is sufficiently different.\n    ^{:key epoch-id}\n    [rc/v-box\n     :size     \"1\"\n     :gap      styles/gs-19s\n     :children\n     (if-not exists?\n       [[instructions]]\n       [[code]\n        [controls]\n        [fragments]])]))\n\n"]}