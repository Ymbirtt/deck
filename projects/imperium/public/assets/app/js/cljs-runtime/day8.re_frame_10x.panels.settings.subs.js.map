{"version":3,"sources":["day8/re_frame_10x/panels/settings/subs.cljs"],"mappings":"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","names":["day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.core.reg_sub","p__45784","map__45785","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","settings","_","p__45787","map__45791","panel-width%","p__45793","vec__45794","cljs.core.nth","n","Math/ceil","p__45797","map__45798","window-width","p__45806","vec__45808","width","p__45816","map__45817","show-panel?","p__45819","map__45820","showing-settings?","p__45825","vec__45827","map__45830","selected-tab","p__45837","map__45838","number-of-epochs","p__45841","map__45842","ignored-events","cljs.core.sort_by","cljs.core/vals","p__45853","map__45854","filtered-view-trace","p__45860","map__45861","low-level-trace","p__45872","map__45873","debug?","p__45877","map__45878","app-db-follows-events?","p__45882","map__45883","ambiance","p__45895","map__45896","syntax-color-scheme"],"sourcesContent":["(ns day8.re-frame-10x.panels.settings.subs\n  (:require\n    [day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.core :as rf]))\n\n(rf/reg-sub\n  ::root\n  (fn [{:keys [settings]} _]\n    settings))\n\n(rf/reg-sub\n  ::panel-width%\n  :<- [::root]\n  (fn [{:keys [panel-width%]} _]\n    panel-width%))\n\n(rf/reg-sub\n  ::panel-width%-rounded\n  :<- [::panel-width%]\n  ;; Rounds panel width to nearest n%\n  (fn [panel-width% [_ n]]\n    ;; https://stackoverflow.com/a/19621472\n    (/ (* (Math/ceil (/ (* panel-width% 100)\n                        n))\n          n)\n       100.0)))\n\n(rf/reg-sub\n  ::window-width\n  ;; Prefer window-width-rounded if you don't need the exact number of pixels.\n  :<- [::root]\n  (fn [{:keys [window-width]} _]\n    window-width))\n\n(rf/reg-sub\n  ::window-width-rounded\n  :<- [::window-width]\n  ;; Window width, rounded up to the nearest n pixels.\n  ;; Useful when you want to respond to window size changes\n  ;; but not too many of them.\n  (fn [width [_ n]]\n    (* (Math/ceil (/ width n))\n       n)))\n\n(rf/reg-sub\n  ::show-panel?\n  :<- [::root]\n  (fn [{:keys [show-panel?]} _]\n    show-panel?))\n\n(rf/reg-sub\n  ::showing-settings?\n  :<- [::root]\n  (fn [{:keys [showing-settings?]} _]\n    showing-settings?))\n\n(rf/reg-sub\n  ::selected-tab\n  :<- [::root]\n  :<- [::showing-settings?]\n  (fn [[{:keys [selected-tab]} showing-settings?] _]\n    (if showing-settings?\n      :settings\n      selected-tab)))\n\n(rf/reg-sub\n  ::number-of-retained-epochs\n  :<- [::root]\n  (fn [{:keys [number-of-epochs]} _]\n    number-of-epochs))\n\n(rf/reg-sub\n  ::ignored-events\n  :<- [::root]\n  (fn [{:keys [ignored-events]} _]\n    (sort-by :sort (vals ignored-events))))\n\n(rf/reg-sub\n  ::filtered-view-trace\n  :<- [::root]\n  (fn [{:keys [filtered-view-trace]} _]\n    (sort-by :sort (vals filtered-view-trace))))\n\n(rf/reg-sub\n  ::low-level-trace\n  ;; TODO: filter from traces panel\n  ;; TODO: eventually drop these low level traces after computing the state we need from them.\n  :<- [::root]\n  (fn [{:keys [low-level-trace]} _]\n    low-level-trace))\n\n(rf/reg-sub\n  ::debug?\n  :<- [::root]\n  (fn [{:keys [debug?]} _]\n    debug?))\n\n(rf/reg-sub\n  ::app-db-follows-events?\n  :<- [::root]\n  (fn [{:keys [app-db-follows-events?]} _]\n    app-db-follows-events?))\n\n(rf/reg-sub\n  ::ambiance\n  :<- [::root]\n  (fn [{:keys [ambiance]} _]\n    ambiance))\n\n(rf/reg-sub\n  ::syntax-color-scheme\n  :<- [::root]\n  (fn [{:keys [syntax-color-scheme]} _]\n    syntax-color-scheme))"]}