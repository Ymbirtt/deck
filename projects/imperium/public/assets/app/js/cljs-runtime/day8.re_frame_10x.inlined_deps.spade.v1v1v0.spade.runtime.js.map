{"version":3,"sources":["day8/re_frame_10x/inlined_deps/spade/v1v1v0/spade/runtime.cljs"],"mappings":";AAKA,AAAA,AAAAA,AAAAC,AAAAC,AAAAC,AAAAC,AAAAC,AAAAC,AAAAC;AAAA;AAAA,AAAA,AAGEC,AAAW,AAAA,AAACC;;AAEd,AAAA,AAAAT,AAAAC,AAAAC,AAAAC,AAAAC,AAAAC,AAAAC,AAAAI;AAAA;AAAA,AAAA,AAAA,AAAA,AAAmBC,AACDC;;AAElB,AAAA,AAAMC,AAAWC;AAAjB,AACE,AAAA,AAACC,AAAoBD;;AAEvB,AAAA,AAAME,AAAaC;AAAnB,AACE,AAACC,AAAWP,AAAoBM;;AAElC,AAAA,AAAOE,AAAiBC,AAAIC;AAA5B,AACE,AAAM,AAAa,AAAA,AAAUD,AAAMC;;AAErC,AAAA,AAAMC,AAASC,AAAGF;AAAlB,AACE,AAACG,AAAMhB,AAAWiB,AAAOF,AAClB,AAA2BH;AAA3B,AACE,AAAU,AAACM,AAAE,AAAA,AAASN,AAAKC;AAA3B;AAAA,AACE,AAACF,AAAgBC,AAAIC;;;AACvB,AAAA,AAACM,AAAMP,AAAYC;;;AAE9B,AAAA,AAAArB,AAAAC,AAAAC,AAAAC,AAAAC,AAAAC,AAAAC,AAAAsB;AAAA;AAAA,AAAA,AAAmBC,AAAM,AAAA,AAACpB;;AAE1B,AAAA,AAAMqB,AAASP,AAAGF;AAAlB,AACE,AAAA,AAAAU,AAAMC,AAASH;AACTI,AAAQ,AAAAC,AAAM,AAAA,AAACC;AAAP,AAAA,AAAAD,AAAA,AAC4B,AAAKX;;AADjCW;;AADd,AAAA,AAAA,AAAA,AAGMd,AAAkBa,AACAZ,AACAE;AALxB,AAME,AAAQ,AAAA,AAAA,AAAOS;AAAf;AAAA,AAAA,AAAA,AAAAI,AAAA,AAAA,AAAA,AAAA,AAAA;;;AAGA,AAAcJ,AAAIC;;AAElB,AAACT,AAAMhB,AAAW6B,AAAMd,AAAGH;;AAC3B,AAACD,AAAgBC,AAAIC;;AAEzB,AAAA,AAAAiB,AAAOM;AAAP,AAAA,AAAAL,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAAE,AAAAC,AAAAH,AAAAA;AAAA,AAAAI,AAAAJ,AAAA,AAAuBM;AAAvB,AAAAF,AAAAJ,AAAA,AAAwCO;AAAxC,AACE,AAAA,AAAAC,AAAQD;AACND;;AACA,AAAA,AAACG,AAKW,AAACG,AAAI,AAAKC;AAAL,AACE,AACE,AAASA;AAAMA;;AADjB,AAIE,AAAK,AAACC,AAAKD,AACN,AAAS,AAAA,AAAQA;AACtB,AAAA,AAAQA;;AANV,AASE,AAAO,AAAAhB,AACE,AAAA,AACKgB;;;;AAfvB,AAAA,AAAI,AAACH,AAAKH,AACR,AAACI,AAAKJ,AAASD,AACdC,AAASD;;;AAe5B,AAAA,AAAMS,AAAeC,AAAKC,AAAgBC,AAAQC;AAAlD,AACE,AAAAC,AAA2C,AAAClB,AAAMgB,AAAQD,AAAgBE,AAAOA;AAAjFC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAnB,AAAA,AAAAmB,AAAA,AAAA,AAAA,AAAA,AAAAlB,AAAAC,AAAAiB,AAAAA;AAAAA,AAAqCC;AAArC,AAAAjB,AAAAgB,AAAA,AAAOtC;AAAP,AAAAsB,AAAAgB,AAAA,AAAgBd;AACVgB,AAAS,AAAA,AAAA9B,AAACY,AAAKnC,AAAWqC;AADhC,AAGE,AAAIgB;AAEF,AAACvC,AAAQuB,AAAWxB;;AAGpB,AAACS,AAAQe,AAAWxB;;;AAEtB,AAAAyC,AAAMP;AAANO,AAAA,AAAA,AAAAA,AAAAC,AAAA,AAAAD,AAAA;AAAA,AAAA,AAAAA;AAAA;AAAA,AAAA,AACiB,AAAClB,AAAcgB;;;AADhC;AAAA;AAEsB,AAAChB,AAAcgB;;;AAFrC;AAGUvC;;;;AAHV,AAAA,AAAAe,AAAA,AAAA,AAAA0B","names":["js/day8","js/day8.re-frame-10x","js/day8.re-frame-10x.inlined-deps","js/day8.re-frame-10x.inlined-deps.spade","js/day8.re-frame-10x.inlined-deps.spade.v1v1v0","js/day8.re-frame-10x.inlined-deps.spade.v1v1v0.spade","js/day8.re-frame-10x.inlined-deps.spade.v1v1v0.spade.runtime","js/day8.re-frame-10x.inlined-deps.spade.v1v1v0.spade.runtime.*injected*","day8.re-frame-10x.inlined-deps.spade.v1v1v0.spade.runtime/*injected*","cljs.core.atom","js/day8.re-frame-10x.inlined-deps.spade.v1v1v0.spade.runtime.*css-compile-flags*","day8.re-frame-10x.inlined-deps.spade.v1v1v0.spade.runtime/*css-compile-flags*","js/goog.DEBUG","day8.re-frame-10x.inlined-deps.spade.v1v1v0.spade.runtime/->css-var","n","day8.re-frame-10x.inlined-deps.garden.v1v3v10.garden.types/->CSSFunction","day8.re-frame-10x.inlined-deps.spade.v1v1v0.spade.runtime/compile-css","elements","day8.re_frame_10x.inlined_deps.garden.v1v3v10.garden.core.css","day8.re-frame-10x.inlined-deps.spade.v1v1v0.spade.runtime/perform-update!","obj","css","day8.re-frame-10x.inlined-deps.spade.v1v1v0.spade.runtime/update!","id","cljs.core.swap_BANG_","cljs.core/update","cljs.core._EQ_","cljs.core.assoc","js/day8.re-frame-10x.inlined-deps.spade.v1v1v0.spade.runtime.*dom*","day8.re-frame-10x.inlined-deps.spade.v1v1v0.spade.runtime/*dom*","day8.re-frame-10x.inlined-deps.spade.v1v1v0.spade.runtime/inject!","cljs.core/deref","dom","element","G__47158","js/document.createElement","js/Error","cljs.core/assoc","p__47159","map__47160","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","day8.re-frame-10x.inlined-deps.spade.v1v1v0.spade.runtime/compose-names","style-name","composed","cljs.core/not","clojure.string.join","cljs.core/seq?","cljs.core.into","cljs.core.map","item","cljs.core/map?","day8.re-frame-10x.inlined-deps.spade.v1v1v0.spade.runtime/ensure-style!","mode","base-style-name","factory","params","map__47162","info","existing","G__47165","cljs.core/Keyword"],"sourcesContent":["(ns ^{:mranderson/inlined true} day8.re-frame-10x.inlined-deps.spade.v1v1v0.spade.runtime\n  (:require [clojure.string :as str]\n            [day8.re-frame-10x.inlined-deps.garden.v1v3v10.garden.core :as garden]\n            [day8.re-frame-10x.inlined-deps.garden.v1v3v10.garden.types :refer [->CSSFunction]]))\n\n(defonce\n  ^{:private true\n    :dynamic true}\n  *injected* (atom {}))\n\n(defonce ^:dynamic *css-compile-flags*\n  {:pretty-print? goog.DEBUG})\n\n(defn ->css-var [n]\n  (->CSSFunction \"var\" n))\n\n(defn compile-css [elements]\n  (garden/css *css-compile-flags* elements))\n\n(defn- perform-update! [obj css]\n  (set! (.-innerHTML (:element obj)) css))\n\n(defn update! [id css]\n  (swap! *injected* update id\n         (fn update-injected-style [obj]\n           (when-not (= (:source obj) css)\n             (perform-update! obj css))\n           (assoc obj :source css))))\n\n(defonce ^:dynamic *dom* (atom nil))\n\n(defn inject! [id css]\n  (let [dom     @*dom*\n        element (doto (js/document.createElement \"style\")\n                  (.setAttribute \"spade-id\" (str id)))\n        obj     {:element element\n                 :source  css\n                 :id      id}]\n    (assert (some? dom)\n            \"An element is required in the dom to inject the style.\")\n\n    (.appendChild dom element)\n\n    (swap! *injected* assoc id obj)\n    (perform-update! obj css)))\n\n(defn- compose-names [{style-name :name composed :composes}]\n  (if-not composed\n    style-name\n    (str/join \" \"\n              (->>\n                (if (seq? composed)\n                  (into composed style-name)\n                  [composed style-name])\n                (map (fn [item]\n                       (cond\n                         (string? item) item\n\n                         ; unpack a defattrs\n                         (and (map? item)\n                              (string? (:class item)))\n                         (:class item)\n\n                         :else\n                         (throw (js/Error.\n                                  (str \"Invalid argument to :composes key:\"\n                                       item))))))))))\n\n(defn ensure-style! [mode base-style-name factory params]\n  (let [{css :css style-name :name :as info} (apply factory base-style-name params params)\n        existing (get @*injected* style-name)]\n\n    (if existing\n      ; update existing style element\n      (update! style-name css)\n\n      ; create a new element\n      (inject! style-name css))\n\n    (case mode\n      :attrs {:class (compose-names info)}\n      (:class :keyframes) (compose-names info)\n      :global css)))"]}