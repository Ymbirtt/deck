{"version":3,"sources":["wscljs/format.cljs"],"mappings":"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","names":["wscljs$format$Format$read$dyn","x__4428__auto__","m__4429__auto__","wscljs.format/read","goog/typeOf","m__4426__auto__","cljs.core/missing-protocol","wscljs$format$Format$write$dyn","wscljs.format/write","wscljs.format/Format","formatter","string","value","wscljs.format/identity","js/wscljs","js/wscljs.format","js/wscljs.format.t_wscljs$format48172","wscljs.format/t_wscljs$format48172","_48174","meta48173","cljs.core/PROTOCOL_SENTINEL","this__4369__auto__","writer__4370__auto__","opt__4371__auto__","cljs.core/-write","wscljs.format/->t_wscljs$format48172","_","s","v","wscljs.format/json","js/wscljs.format.t_wscljs$format48175","wscljs.format/t_wscljs$format48175","_48177","meta48176","wscljs.format/->t_wscljs$format48175","cljs.core.js__GT_clj","js/JSON.parse","js/JSON.stringify","cljs.core/clj->js","wscljs.format/edn","js/wscljs.format.t_wscljs$format48178","wscljs.format/t_wscljs$format48178","_48180","meta48179","wscljs.format/->t_wscljs$format48178","cljs.reader.read_string","cljs.core.prn_str"],"sourcesContent":["(ns wscljs.format\n  (:refer-clojure :exclude [identity])\n  (:require [cljs.reader :as reader]))\n\n\n(defprotocol Format\n  \"Protocol used to define encoding format for socket messages.\"\n  (read  [formatter string])\n  (write [formatter value]))\n\n\n(def identity\n  \"The identity formatter. Does nothing to the input or output.\"\n  (reify Format\n    (read  [_ s] s)\n    (write [_ v] v)))\n\n\n(def json\n  \"Read and write data encoded in JSON.\"\n  (reify Format\n    (read  [_ s] (js->clj (js/JSON.parse s) :keywordize-keys true))\n    (write [_ v] (js/JSON.stringify (clj->js v)))))\n\n(def edn\n  \"Read and write data serialized as EDN.\"\n  (reify Format\n    (read [_ s] (reader/read-string s))\n    (write [_ v] (prn-str v))))\n"]}