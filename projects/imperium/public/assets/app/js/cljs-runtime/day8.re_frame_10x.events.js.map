{"version":3,"sources":["day8/re_frame_10x/events.cljs"],"mappings":"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","names":["day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.core.reg_event_fx","day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.core.inject_cofx","id1","cljs.core/random-uuid","id2","day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.core/unwrap","p__52322","p__52323","map__52324","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","map__52325","panel-width-ratio","show-panel","selected-tab","filter-items","app-db-json-ml-expansions","external-window?","external-window-dimensions","show-epoch-traces?","using-trace?","ignored-events","low-level-trace","filtered-view-trace","retained-epochs","app-db-paths","app-db-follow-events?","ambiance","syntax-color-scheme","categories","cofx","debug?","day8.re-frame-10x.navigation.views/mount","cljs.core.into","cljs.core/sorted-map","_","js/window.addEventListener","day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.core/dispatch-sync","day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.core.reg_event_db","p__52329","vec__52330","cljs.core.nth","db","unloading?","cljs.core/assoc-in"],"sourcesContent":["(ns day8.re-frame-10x.events\n  (:require\n    [re-frame.core]\n    [re-frame.db]\n    [re-frame.trace]\n    [re-frame.interop]\n    [day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.core :as rf]\n    [day8.re-frame-10x.fx.local-storage                           :as local-storage]\n    [day8.re-frame-10x.navigation.events                          :as navigation.events]\n    [day8.re-frame-10x.navigation.views                           :as navigation.views]\n    [day8.re-frame-10x.panels.app-db.events                       :as app-db.events]\n    [day8.re-frame-10x.panels.settings.events                     :as settings.events]\n    [day8.re-frame-10x.panels.traces.events                       :as traces.events]))\n\n(rf/reg-event-fx\n  ::init\n  [(rf/inject-cofx ::local-storage/get {:key \"panel-width-ratio\" :or 0.35})\n   (rf/inject-cofx ::local-storage/get {:key \"show-panel\" :or true})\n   (rf/inject-cofx ::local-storage/get {:key \"selected-tab\" :or :event})\n   (rf/inject-cofx ::local-storage/get {:key \"filter-items\" :or []})\n   (rf/inject-cofx ::local-storage/get {:key \"app-db-json-ml-expansions\" :or #{}})\n   (rf/inject-cofx ::local-storage/get {:key \"external-window?\" :or false})\n   (rf/inject-cofx ::local-storage/get {:key \"external-window-dimensions\" :or {:width 800 :height 800 :top 0 :left 0}})\n   (rf/inject-cofx ::local-storage/get {:key \"show-epoch-traces?\" :or true})\n   (rf/inject-cofx ::local-storage/get {:key \"using-trace?\" :or true})\n   (rf/inject-cofx ::local-storage/get {:key \"ignored-events\" :or {}})\n   (rf/inject-cofx ::local-storage/get {:key \"low-level-trace\" :or {:reagent true :re-frame true}})\n   (rf/inject-cofx ::local-storage/get {:key \"filtered-view-trace\" :or (let [id1 (random-uuid)\n                                                                             id2  (random-uuid)]\n                                                                         {id1 {:id id1 :ns-str \"re-com.box\" :ns 're-com.box :sort 0}\n                                                                          id2 {:id id2 :ns-str \"re-com.input-text\" :ns 're-com.input-text :sort 1}})})\n   (rf/inject-cofx ::local-storage/get {:key \"retained-epochs\" :or 25})\n   (rf/inject-cofx ::local-storage/get {:key \"app-db-paths\" :or {}})\n   (rf/inject-cofx ::local-storage/get {:key \"app-db-follows-events?\" :or true})\n   (rf/inject-cofx ::local-storage/get {:key \"ambiance\" :or :bright})\n   (rf/inject-cofx ::local-storage/get {:key \"syntax-color-scheme\" :or :cljs-devtools})\n   (rf/inject-cofx ::local-storage/get {:key \"categories\" :or #{:event :sub/run :sub/create :sub/dispose}})\n   rf/unwrap]\n  (fn [{:keys [panel-width-ratio show-panel selected-tab filter-items app-db-json-ml-expansions\n               external-window? external-window-dimensions show-epoch-traces? using-trace?\n               ignored-events low-level-trace filtered-view-trace retained-epochs app-db-paths\n               app-db-follow-events? ambiance syntax-color-scheme categories] :as cofx}\n       {:keys [debug?]}]\n    {:fx [(when using-trace?\n            [:dispatch [::settings.events/enable-tracing]])\n          [:dispatch [::settings.events/panel-width% panel-width-ratio]]\n          [:dispatch [::settings.events/show-panel? show-panel]]\n          [:dispatch [::settings.events/selected-tab selected-tab]]\n          [:dispatch [::settings.events/set-ignored-events ignored-events]]\n          [:dispatch [::settings.events/set-filtered-view-trace filtered-view-trace]]\n          [:dispatch [::settings.events/set-low-level-trace low-level-trace]]\n          [:dispatch [::settings.events/set-number-of-retained-epochs retained-epochs]]\n          [:dispatch [::settings.events/app-db-follows-events? app-db-follow-events?]]\n          [:dispatch [::settings.events/set-ambiance ambiance]]\n          [:dispatch [::settings.events/set-syntax-color-scheme syntax-color-scheme]]\n          [:dispatch [::settings.events/debug? debug?]]\n          ;; Important that window dimensions are set before we open an external window.\n          [:dispatch [::settings.events/external-window-dimensions external-window-dimensions]]\n          (when external-window?\n            [:dispatch [::navigation.events/launch-external navigation.views/mount]])\n          [:dispatch [::traces.events/set-queries filter-items]]\n          [:dispatch [::traces.events/set-categories categories]]\n          [:dispatch [::traces.events/set-filter-by-selected-epoch? show-epoch-traces?]]\n          [:dispatch [::app-db.events/paths (into (sorted-map) app-db-paths)]]\n          [:dispatch [::app-db.events/set-json-ml-paths app-db-json-ml-expansions]]\n          [:dispatch [:global/add-unload-hook]]\n          [:dispatch [::app-db.events/reagent-id]]]}))\n\n;; Global\n\n(rf/reg-event-fx\n  :global/add-unload-hook\n  (fn [_ _]\n    (js/window.addEventListener \"beforeunload\" #(rf/dispatch-sync [:global/unloading? true]))\n    nil))\n\n(rf/reg-event-db\n  :global/unloading?\n  (fn [db [_ unloading?]]\n    (assoc-in db [:global :unloading?] unloading?)))"]}