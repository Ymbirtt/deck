{"version":3,"sources":["day8/re_frame_10x/inlined_deps/spade/v1v1v0/spade/util.cljc"],"mappings":";AAGA;;;;;;AAAA,AAAMA,AAKHC;AALH,AAME,AAAMC,AAAW,AAAQD;AAAzB,AACE,AAAI,AAACE,AAAOD;AAGV,AAACE,AAAK,AAAA,AAACC;;AAKHH,AACA,AAAA,AAAA,AAACI,AACD,AAAA,AAAA,AAACA,AACD,AAAA,AAAA,AAACA;;;AAEX,AAAA,AAAMC,AAAUC;AAAhB,AACMA,AAEA,AAAA,AAAA,AAAA,AAACF;;AAEP,AAAA,AAAMG,AAAaC;AAAnB,AACE,AAAA,AACE,AAACE,AAAKF;AADR,AAAAC,AAG4BE;AAH5B,AAAA;;AAMF,AAAA,AAAMC,AAAkBC,AAAKC,AAAUC;AAAvC,AACE,AAEED;AAAU,AAAA,AAAKD,AAAS,AAACR,AAASS;;AAFpC,AAIE,AAACE,AAAID;AAAQ,AAAAE,AAAc,AAACV,AAAYQ;AAA3B,AAAA,AAAAE;AAAA,AAAAA,AAASC;AAAT,AACE,AAAA,AAAKL,AAASK;;AAEd,AAAMC,AAAI,AAAA,AAAqCN;AAA/C,AACW,AAACO,AAAgBD;;AAE1BN;;;AAVnB,AAaQA","names":["day8.re-frame-10x.inlined-deps.spade.v1v1v0.spade.util/factory->name","factory","given-name","cljs.core/empty?","cljs.core/name","cljs.core.gensym","clojure.string/replace","day8.re-frame-10x.inlined-deps.spade.v1v1v0.spade.util/sanitize","s","day8.re-frame-10x.inlined-deps.spade.v1v1v0.spade.util/params->key","p","e45567","cljs.core/hash","_","day8.re-frame-10x.inlined-deps.spade.v1v1v0.spade.util/build-style-name","base","style-key","params","cljs.core/seq","temp__5733__auto__","pkey","msg","js/console.warn"],"sourcesContent":["(ns ^{:mranderson/inlined true} day8.re-frame-10x.inlined-deps.spade.v1v1v0.spade.util\n  (:require [clojure.string :as str]))\n\n(defn factory->name\n  \"Given a style factory function, return an appropriate name for its\n   style. This function assumes it will be called *once* for any given\n   factory; subsequent calls for the same factory *may not* return the\n   same value (especially under :simple optimizations).\"\n  [factory]\n  (let [given-name (.-name factory)]\n    (if (empty? given-name)\n      ; under :simple optimizations, the way the function is declared does\n      ; not leave any value for its name. so... generate one!\n      (name (gensym \"SPD\"))\n\n      ; normal case: base the style name on the factory function's name.\n      ; this lets us have descriptive names in dev, and concise names in\n      ; prod, without having to embed anything extra in the file\n      (-> given-name\n          (str/replace \"_factory$\" \"\")\n          (str/replace #\"[_$]\" \"-\")\n          (str/replace #\"^-\" \"_\")))))\n\n(defn sanitize [s]\n  (-> s\n      str\n      (str/replace #\"[^A-Za-z0-9-_]\" \"-\")))\n\n(defn params->key [p]\n  (try\n    (hash p)\n    (catch #?(:cljs :default\n              :clj Throwable) _\n      nil)))\n\n(defn build-style-name [base style-key params]\n  (cond\n    ; easy case: a key was provided\n    style-key (str base \"_\" (sanitize style-key))\n\n    (seq params) (if-let [pkey (params->key params)]\n                   (str base \"_\" pkey)\n\n                   (let [msg (str \"WARNING: no key provided for \" base)]\n                     #?(:cljs (js/console.warn msg)\n                        :clj (throw (Exception. msg)))\n                     base))\n\n    ; easiest case: no key is necessary\n    :else base))"]}