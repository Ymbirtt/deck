{"version":3,"sources":["day8/re_frame_10x/panels/event/subs.cljs"],"mappings":"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","names":["day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.core.reg_sub","p__50329","map__50330","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","code","_","traces","cljs.core.keep_indexed","i","trace","temp__5739__auto__","cljs.core.get_in","cljs.core.pr_str","cljs.core.map_indexed","cljs.core.assoc","cljs.core/vec","cljs.core/first","cljs.core/boolean","p__50340","vec__50341","map__50344","cljs.core.nth","execution-order?","unordered-fragments","cljs.core.remove","line","cljs.core/fn?","cljs.core.sort_by","p__50346","map__50347","trace-id","p__50349","map__50350","form","zprint.core/zprint-str","p__50352","map__50353","code-open?","p__50358","map__50359","highlighted-form","p__50364","map__50365","show-all-code?","p__50375","map__50376","repl-msg-state","day8.re-frame-10x.panels.event.subs/canvas","js/document.createElement","context","p__50382","vec__50383","window-width","char-width","Math/ceil"],"sourcesContent":["(ns day8.re-frame-10x.panels.event.subs\n  (:require\n    [zprint.core                                                  :as zp]\n    [day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.core :as rf]\n    [day8.re-frame-10x.panels.settings.subs                              :as settings.subs]\n    [day8.re-frame-10x.panels.traces.subs                                :as traces.subs]))\n\n(rf/reg-sub\n  ::root\n  (fn [{:keys [code]} _]\n    code))\n\n(rf/reg-sub\n  ::code-for-epoch\n  :<- [::traces.subs/filtered-by-epoch]\n  (fn [traces _]\n    (->> traces\n      (keep-indexed\n        (fn [i trace]\n          (when-some [code (get-in trace [:tags :code])]\n            {:id       i\n             :trace-id (:id trace)\n             :title    (pr-str (:op-type trace))\n             :code     (->> code (map-indexed (fn [i code] (assoc code :id i))) vec) ;; Add index\n             :form     (get-in trace [:tags :form])})))\n      (first)))) ;; Ignore multiple code executions for now\n\n\n(rf/reg-sub\n  ::code-for-epoch-exists?\n  :<- [::code-for-epoch]\n  (fn [code _]\n    (boolean code)))\n\n(rf/reg-sub\n  ::fragments-for-epoch\n  :<- [::code-for-epoch]\n  :<- [::execution-order?]\n  (fn [[{:keys [code]} execution-order?] _]\n    (let [unordered-fragments (remove (fn [line] (fn? (:result line))) code)]\n      (if execution-order?\n        unordered-fragments\n        (sort-by :syntax-order unordered-fragments)))))\n\n(rf/reg-sub\n  ::trace-id-for-epoch\n  :<- [::code-for-epoch]\n  (fn [{:keys [trace-id]} _]\n    trace-id))\n\n(rf/reg-sub\n  ::form-for-epoch\n  :<- [::code-for-epoch]\n  (fn [{:keys [form]} _]\n    form))\n\n(rf/reg-sub\n  ::zprint-form-for-epoch\n  :<- [::form-for-epoch]\n  (fn [form _]\n    (zp/zprint-str form)))\n\n(rf/reg-sub\n  ::execution-order?\n  :<- [::root]\n  (fn [code _]\n    (get code :execution-order? true)))\n\n(rf/reg-sub\n  ::code-open?\n  :<- [::root]\n  (fn [{:keys [code-open?]} _]\n    code-open?))\n\n(rf/reg-sub\n  ::highlighted-form\n  :<- [::root]\n  (fn [{:keys [highlighted-form]} _]\n    highlighted-form))\n\n(rf/reg-sub\n  ::show-all-code?\n  :<- [::root]\n  (fn [{:keys [show-all-code?]} _]\n    show-all-code?))\n\n(rf/reg-sub\n  ::repl-msg-state\n  :<- [::root]\n  (fn [{:keys [repl-msg-state]} _]\n    repl-msg-state))\n\n;; [IJ] TODO: This should not be a subscription:\n(def canvas (js/document.createElement \"canvas\"))\n\n(rf/reg-sub\n  ::single-character-width\n  (fn [_ _]\n    (let [context (.getContext canvas \"2d\")]\n      (set! (.-font context) \"monospace 1em\")\n      (.-width (.measureText context \"T\")))))\n\n(rf/reg-sub\n  ::max-column-width\n  :<- [::settings.subs/window-width-rounded 100]\n  :<- [::single-character-width]\n  ;; It seems like it would be possible to do something smarter responding to panel sizing,\n  ;; but that introduces a lot of jank, so we just set to maximum possible window width.\n  (fn [[window-width char-width] _]\n    (Math/ceil (/ window-width\n                  char-width))))"]}