{"version":3,"sources":["day8/re_frame_10x/panels/traces/events.cljs"],"mappings":"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","names":["day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.core.reg_event_db","day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.core.path","day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.core/trim-v","p__49130","vec__49139","cljs.core.nth","_","draft-query-type","p__49143","vec__49144","draft-query","day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.core.reg_event_fx","p__49177","map__49178","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","db","map__49180","cljs.core._EQ_","js/isNaN","js/parseFloat","cljs.core.assoc","day8.re_frame_10x.fx.local_storage.after","p__49194","vec__49195","filters","day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.core/unwrap","p__49204","map__49205","query","type","p1__49198#","cljs.core/some","p1__49199#","cljs.core.remove","cljs.core.conj","cljs.core/random-uuid","clojure.string/lower-case","p__49210","map__49211","id","p1__49209#","p__49213","vec__49214","old","new","clojure.set/superset?","clojure.set.difference","clojure.set.union","p__49217","vec__49218","categories","p__49221","vec__49222","filter-by-selected-epoch?","expansions","cljs.core.update","cljs.core/not","p__49231","vec__49232","showing?","cljs.core.get_in","p1__49230#","cljs.core.update_in"],"sourcesContent":["(ns day8.re-frame-10x.panels.traces.events\n  (:require\n    [day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.core :as rf]\n    [day8.re-frame-10x.fx.local-storage :as local-storage]\n    [clojure.string :as string]\n    [clojure.set :as set]))\n\n(rf/reg-event-db\n  ::set-draft-query-type\n  [(rf/path [:traces :draft-query-type]) rf/trim-v]\n  (fn [_ [draft-query-type]]\n    draft-query-type))\n\n(rf/reg-event-db\n  ::set-draft-query\n  [(rf/path [:traces :draft-query]) rf/trim-v]\n  (fn [_ [draft-query] _]\n    draft-query))\n\n(rf/reg-event-fx\n  ::save-draft-query\n  [(rf/path [:traces])]\n  (fn [{:keys [db]} _]\n    (let [{:keys [draft-query-type draft-query]\n           :or   {draft-query-type :contains}} db]\n      (if (and (= draft-query-type :slower-than)\n               (js/isNaN (js/parseFloat draft-query)))\n        {:db (assoc db :draft-query-error true)}\n        {:db (-> db\n                 (assoc :draft-query-error false)\n                 (assoc :draft-query \"\"))\n         :dispatch [::add-query\n                    {:type  draft-query-type\n                     :query draft-query}]}))))\n\n(rf/reg-event-db\n  ::set-queries\n  [(rf/path [:traces :queries]) rf/trim-v (local-storage/after \"filter-items\")]\n  (fn [_ [filters]]\n    filters))\n\n(rf/reg-event-db\n  ::add-query\n  [(rf/path [:traces :queries]) rf/unwrap (local-storage/after \"filter-items\")]\n  (fn [filters {:keys [query type]}]\n    (if (some #(= query (:query %)) filters)\n      filters\n      (let [filters (if (= :slower-than type)\n                      (remove #(= :slower-than (:type %)) filters)\n                      filters)]\n        (conj filters\n              {:id    (random-uuid)\n               :query (if (= type :contains)\n                        (string/lower-case query)\n                        (js/parseFloat query))\n               :type  type})))))\n\n(rf/reg-event-db\n  ::remove-query\n  [(rf/path [:traces :queries]) rf/unwrap (local-storage/after \"filter-items\")]\n  (fn [filters {:keys [id]}]\n    (remove #(= (:id %) id) filters)))\n\n(rf/reg-event-db\n  ::reset-queries\n  [(rf/path [:traces :queries]) (local-storage/after \"filter-items\")]\n  (fn [_ _]\n    []))\n\n(rf/reg-event-db\n  ::toggle-categories\n  [(rf/path [:traces :categories]) rf/trim-v (local-storage/after \"categories\")]\n  (fn [old [new]]\n    (if (set/superset? old new)\n      (set/difference old new)\n      (set/union old new))))\n\n(rf/reg-event-db\n  ::set-categories\n  [(rf/path [:traces :categories]) rf/trim-v (local-storage/after \"categories\")]\n  (fn [_ [categories]]\n    categories))\n\n(rf/reg-event-db\n  ::set-filter-by-selected-epoch?\n  [(rf/path [:traces :filter-by-selected-epoch?]) rf/trim-v (local-storage/after \"show-epoch-traces?\")]\n  (fn [_ [filter-by-selected-epoch?]]\n    filter-by-selected-epoch?))\n\n(rf/reg-event-db\n  ::toggle-expansions\n  [(rf/path [:traces :expansions])]\n  (fn [expansions _]\n    (-> expansions\n        (assoc :overrides {})\n        (update :show-all? not))))\n\n(rf/reg-event-db\n  ::toggle-expansion\n  [(rf/path [:traces :expansions]) rf/trim-v]\n  (fn [expansions [id]]\n    (let [showing? (get-in expansions [:overrides id] (:show-all? expansions))]\n      (update-in expansions [:overrides id] #(if showing? false (not %))))))"]}