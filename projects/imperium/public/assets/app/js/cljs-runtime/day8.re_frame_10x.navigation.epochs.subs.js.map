{"version":3,"sources":["day8/re_frame_10x/navigation/epochs/subs.cljs"],"mappings":";AAMA,AAAA,AAACA,AAEC,AAAAC,AAAsBO;AAAtB,AAAA,AAAAN,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAAE,AAAAC,AAAAH,AAAAA;AAAA,AAAAI,AAAAJ,AAAA,AAAaK;AAAb,AACEA;;AAEJ,AAAA,AAAA,AAAA,AAAA,AAACP,AAGC,AAAAS,AAA6BD;AAA7B,AAAA,AAAAE,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAP,AAAA,AAAAO,AAAA,AAAA,AAAA,AAAA,AAAAN,AAAAC,AAAAK,AAAAA;AAAA,AAAAJ,AAAAI,AAAA,AAAaC;AAAb,AACEA;;AAEJ,AAAA,AAAA,AAAA,AAAA,AAACX,AAGC,AAAKW,AAAcH;AAAnB,AACO,AAACI,AAAI,AAACC,AAAKC,AAAI,AAAA,AAAA,AAAA,AAACC,AAAkBC,AAAgCC,AAC7DN,AACL,AAACO,AAAQC,AAAMC;;AAExB,AAAA,AAAA,AAAA,AAAA,AAACpB,AAGC,AAAAqB,AAAiCb;AAAjC,AAAA,AAAAc,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAnB,AAAA,AAAAmB,AAAA,AAAA,AAAA,AAAA,AAAAlB,AAAAC,AAAAiB,AAAAA;AAAA,AAAAhB,AAAAgB,AAAA,AAAaC;AAAb,AACEA;;AAEJ,AAAA,AAAA,AAAA,AAAA,AAACvB,AAGC,AAAAwB,AAAyBhB;AAAzB,AAAA,AAAAiB,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAtB,AAAA,AAAAsB,AAAA,AAAA,AAAA,AAAA,AAAArB,AAAAC,AAAAoB,AAAAA;AAAA,AAAAnB,AAAAmB,AAAA,AAAaC;AAAb,AACEA;;AAEJ,AAAA,AAAA,AAAA,AAAA,AAAC1B,AAGC,AAAA2B,AAAuBnB;AAAvB,AAAA,AAAAoB,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAzB,AAAA,AAAAyB,AAAA,AAAA,AAAA,AAAA,AAAAxB,AAAAC,AAAAuB,AAAAA;AAAA,AAAAtB,AAAAsB,AAAA,AAAaC;AAAb,AACEA;;AAEJ,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAC7B,AAMC,AAAA8B,AAAyDtB;AAAzD,AAAA,AAAAuB,AAAAD;AAAA,AAAAE,AAAAD,AAAA,AAAA,AAAML;AAAN,AAAAM,AAAAD,AAAA,AAAA,AAAgBF;AAAhB,AAAAG,AAAAD,AAAA,AAAA,AAAwBpB;AAAxB,AAAAqB,AAAAD,AAAA,AAAA,AAAsCR;AAAtC,AACE,AACE,AAAA,AAAMA;AAAmB,AAACU,AAAKJ;;AADjC,AAEE,AAAGN,AAAkB,AAACJ,AAAMO;AAAY,AAACP,AAAMU;;AAFjD,AAKE,AAAGN,AAAkB,AAACU,AAAKP;AAAY,AAACO,AAAKJ;;AAL/C,AAMQ,AAACvB,AAAIK,AAAcY;;;;;;AAE/B,AAAA,AAAA,AAAA,AAAA,AAACvB,AAGC,AAAAkC,AAA0B1B;AAA1B,AAAA,AAAA2B,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAhC,AAAA,AAAAgC,AAAA,AAAA,AAAA,AAAA,AAAA/B,AAAAC,AAAA8B,AAAAA;AAAA,AAAA7B,AAAA6B,AAAA,AAAaC;AAAb,AACEA;;AAEJ,AAAA,AAAA,AAAA,AAAA,AAACpC,AAGC,AAAKqC,AAAM7B;AAAX,AACE,AAACQ,AAAoBqB;;AAEzB,AAAA,AAAA,AAAA,AAAA,AAACrC,AAGC,AAAKsC,AAAM9B;AAAX,AACE,AAAA,AAAA,AAAA,AAAC+B,AAAOD;;AAEZ,AAAA,AAAA,AAAA,AAAA,AAACtC,AAGC,AAAK6B,AAAQrB;AAAb,AACE,AAACgC,AAAMX;;AAEX,AAAA,AAAA,AAAA,AAAA,AAAC7B,AAGC,AAAAyC,AAAoCjC;AAApC,AAAA,AAAAkC,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAvC,AAAA,AAAAuC,AAAA,AAAA,AAAA,AAAA,AAAAtC,AAAAC,AAAAqC,AAAAA;AAAA,AAAApC,AAAAoC,AAAA,AAAaC;AAAb,AACEA;;AAQJ,AAAA,AAAA,AAAA,AAAA,AAAC3C,AAGC,AAAKqC,AAAM7B;AAAX,AACE,AAAA,AAAK,AAACW,AAAMkB;;AAEhB,AAAA,AAAA,AAAA,AAAA,AAACrC,AAGC,AAAKqC,AAAM7B;AAAX,AACE,AAAA,AAAK,AAACyB,AAAKI;;AAEf,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACrC,AAIC,AAAA4C,AAAmCpC;AAAnC,AAAA,AAAAqC,AAAAD;AAAA,AAAAZ,AAAAa,AAAA,AAAA,AAAMtB;AAAN,AAAAS,AAAAa,AAAA,AAAA,AAAwBnB;AAAxB,AACE,AAAK,AAAA,AAAK,AAACc,AAAMd,AACZ,AAAI,AAAA,AAAMH,AACN,AAAGA,AAAkB,AAAA,AAACS,AAAIN;;AAEvC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAC1B,AAIC,AAAA8C,AAAmCtC;AAAnC,AAAA,AAAAuC,AAAAD;AAAA,AAAAd,AAAAe,AAAA,AAAA,AAAMxB;AAAN,AAAAS,AAAAe,AAAA,AAAA,AAAwBrB;AAAxB,AACE,AAAK,AAAA,AAAK,AAACc,AAAMd,AACZ,AAAA,AAAA,AAAOH,AACP,AAAGA,AAAkB,AAACyB,AAAuBtB","names":["day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.core.reg_sub","p__45832","map__45833","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","epochs","_","p__45844","map__45845","matches-by-id","cljs.core.map","cljs.core.juxt","cljs.core/key","cljs.core.comp","day8.re-frame-10x.tools.metamorphic/matched-event","cljs.core/val","cljs.core.sort_by","cljs.core/first","cljs.core/>","p__45856","map__45857","selected-epoch-id","p__45863","map__45867","match-ids","p__45876","map__45879","matches","p__45889","vec__45892","cljs.core.nth","cljs.core/last","p__45898","map__45900","match-info","match","trace","cljs.core.get_in","cljs.core/count","p__45908","map__45909","selected-epoch-index","p__45912","vec__45913","p__45922","vec__45923","day8.re-frame-10x.tools.coll/last-in-vec"],"sourcesContent":["(ns day8.re-frame-10x.navigation.epochs.subs\n  (:require\n    [day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.core :as rf]\n    [day8.re-frame-10x.tools.metamorphic :as metam]\n    [day8.re-frame-10x.tools.coll :as tools.coll]))\n\n(rf/reg-sub\n  ::root\n  (fn [{:keys [epochs]} _]\n    epochs))\n\n(rf/reg-sub\n  ::matches-by-id\n  :<- [::root]\n  (fn [{:keys [matches-by-id]} _]\n    matches-by-id))\n\n(rf/reg-sub\n  ::events-by-id\n  :<- [::matches-by-id]\n  (fn [matches-by-id _]\n    (->> (map (juxt key (comp :event :tags metam/matched-event :match-info val))\n              matches-by-id)\n         (sort-by first >))))\n\n(rf/reg-sub\n  ::selected-epoch-id\n  :<- [::root]\n  (fn [{:keys [selected-epoch-id]} _]\n    selected-epoch-id))\n\n(rf/reg-sub\n  ::match-ids\n  :<- [::root]\n  (fn [{:keys [match-ids]} _]\n    match-ids))\n\n(rf/reg-sub\n  ::matches\n  :<- [::root]\n  (fn [{:keys [matches]} _]\n    matches))\n\n(rf/reg-sub\n  ::selected-match-state\n  :<- [::match-ids]\n  :<- [::matches]\n  :<- [::matches-by-id]\n  :<- [::selected-epoch-id]\n  (fn [[match-ids matches matches-by-id selected-epoch-id] _]\n    (cond\n      (nil? selected-epoch-id) (last matches)\n      (< selected-epoch-id (first match-ids)) (first matches)\n      ;; This case seems impossible, but can happen if the user filters out\n      ;; an event that they are 'on'.\n      (> selected-epoch-id (last match-ids)) (last matches)\n      :else (get matches-by-id selected-epoch-id))))\n\n(rf/reg-sub\n  ::selected-match\n  :<- [::selected-match-state]\n  (fn [{:keys [match-info]} _]\n    match-info))\n\n(rf/reg-sub\n  ::selected-event-trace\n  :<- [::selected-match]\n  (fn [match _]\n    (metam/matched-event match)))\n\n(rf/reg-sub\n  ::selected-event\n  :<- [::selected-event-trace]\n  (fn [trace _]\n    (get-in trace [:tags :event])))\n\n(rf/reg-sub\n  ::number-of-matches\n  :<- [::matches]\n  (fn [matches _]\n    (count matches)))\n\n(rf/reg-sub\n  ::selected-event-index\n  :<- [::root]\n  (fn [{:keys [selected-epoch-index]} _]\n    selected-epoch-index))\n\n#_(rf/reg-sub\n    ::selected-epoch-id\n    :<- [::selected-match]\n    (fn [epochs _]\n      (:id (first epochs))))\n\n(rf/reg-sub\n  ::beginning-trace-id\n  :<- [::selected-match]\n  (fn [match _]\n    (:id (first match))))\n\n(rf/reg-sub\n  ::ending-trace-id\n  :<- [::selected-match]\n  (fn [match _]\n    (:id (last match))))\n\n(rf/reg-sub\n  ::older-epochs-available?\n  :<- [::selected-epoch-id]\n  :<- [::match-ids]\n  (fn [[selected-epoch-id match-ids] _]\n    (and (< 1 (count match-ids))\n         (or (nil? selected-epoch-id)\n             (> selected-epoch-id (nth match-ids 0))))))\n\n(rf/reg-sub\n  ::newer-epochs-available?\n  :<- [::selected-epoch-id]\n  :<- [::match-ids]\n  (fn [[selected-epoch-id match-ids] _]\n    (and (< 1 (count match-ids))\n         (some? selected-epoch-id)\n         (< selected-epoch-id (tools.coll/last-in-vec match-ids)))))\n\n"]}