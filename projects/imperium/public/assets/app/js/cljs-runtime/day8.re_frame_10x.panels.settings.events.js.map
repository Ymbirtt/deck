{"version":3,"sources":["day8/re_frame_10x/panels/settings/events.cljs"],"mappings":"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","names":["day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.core.reg_event_db","day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.core.path","day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.core/trim-v","day8.re_frame_10x.fx.local_storage.after","p__46922","vec__46923","cljs.core.nth","_","width%","x__4214__auto__","y__4215__auto__","p__46926","vec__46927","width","p__46930","vec__46931","selected-tab","showing?","cljs.core/not","p__46934","vec__46935","show-panel?","db","day8.re-frame-10x.fx.local-storage/delete-all-keys!","js/location.reload","p__46938","vec__46939","ambiance","p__46942","vec__46943","syntax-color-scheme","p__46948","vec__46949","num-str","num","js/parseInt","js/isNaN","cljs.core/pos-int?","day8.re-frame-10x.panels.settings.events/ignored-event-interceptors","ignored-events","id","cljs.core/random-uuid","cljs.core.assoc","js/Date.now","p__46960","vec__46961","cljs.core.dissoc","p__46964","vec__46965","event-str","event","day8.re-frame-10x.tools.reader.edn/read-string-maybe","cljs.core/assoc-in","cljs.core.update_in","old-event","p__46968","vec__46969","day8.re-frame-10x.panels.settings.events/filtered-view-trace-interceptors","filtered-view-trace","p__46972","vec__46973","p__46982","vec__46983","ns-str","p__46989","vec__46990","day8.re-frame-10x.panels.settings.events/low-level-trace-interceptors","p__46996","vec__46997","low-level","p__47000","vec__47001","trace-type","capture?","p__47005","vec__47007","debug?","p__47010","vec__47011","follows-events?","p__47014","vec__47015","external-window-dimensions","day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.core/unwrap","p__47019","map__47020","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","height","p__47025","map__47031","left","top","day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.core.reg_event_fx","settings","now-showing?","external-panel?","using-trace?","or__4126__auto__","cljs.core.merge"],"sourcesContent":["(ns day8.re-frame-10x.panels.settings.events\n  (:require\n    [day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.core :as rf]\n    [day8.re-frame-10x.fx.local-storage                           :as local-storage]\n    [day8.re-frame-10x.fx.trace                                   :as trace]\n    [day8.re-frame-10x.tools.reader.edn                           :as reader.edn]))\n\n(rf/reg-event-db\n  ::panel-width%\n  [(rf/path [:settings :panel-width%]) rf/trim-v (local-storage/after \"panel-width-ratio\")]\n  (fn [_ [width%]]\n    (max width% 0.05)))\n\n(rf/reg-event-db\n  ::window-width\n  [(rf/path [:settings :window-width]) rf/trim-v]\n  (fn [_ [width]]\n    width))\n\n(rf/reg-event-db\n  ::selected-tab\n  [(rf/path [:settings :selected-tab]) rf/trim-v (local-storage/after \"selected-tab\")]\n  (fn [_ [selected-tab]]\n    selected-tab))\n\n(rf/reg-event-db\n  ::toggle\n  [(rf/path [:settings :showing-settings?])]\n  (fn [showing? _]\n    (not showing?)))\n\n(rf/reg-event-db\n  ::show-panel?\n  [(rf/path [:settings :show-panel?]) rf/trim-v (local-storage/after \"show-panel\")]\n  (fn [_ [show-panel?]]\n    show-panel?))\n\n(rf/reg-event-db\n  ::factory-reset\n  (fn [db _]\n    ;; [IJ] TODO: these should be fx\n    (local-storage/delete-all-keys!)\n    (js/location.reload)\n    db))\n\n(rf/reg-event-db\n  ::set-ambiance\n  [(rf/path [:settings :ambiance]) rf/trim-v (local-storage/after \"ambiance\")]\n  (fn [_ [ambiance]]\n    ambiance))\n\n(rf/reg-event-db\n  ::set-syntax-color-scheme\n  [(rf/path [:settings :syntax-color-scheme]) rf/trim-v (local-storage/after \"syntax-color-scheme\")]\n  (fn [_ [syntax-color-scheme]]\n    syntax-color-scheme))\n\n(rf/reg-event-db\n  ::set-number-of-retained-epochs\n  [(rf/path [:settings :number-of-epochs]) rf/trim-v (local-storage/after \"retained-epochs\")]\n  (fn [_ [num-str]]\n    ;; TODO: this is not perfect, there is an issue in re-com\n    ;; where it won't update its model if it never receives another\n    ;; changes after it's on-change is fired.\n    ;; TODO: you could reset the stored epochs on change here\n    ;; once the way they are processed is refactored.\n    (let [num (js/parseInt num-str)\n          num (if (and (not (js/isNaN num)) (pos-int? num))\n                num\n                5)]\n      num)))\n\n(def ignored-event-interceptors\n  [(rf/path [:settings :ignored-events])\n   rf/trim-v\n   (local-storage/after \"ignored-events\")])\n\n(rf/reg-event-db\n  ::add-ignored-event\n  ignored-event-interceptors\n  (fn [ignored-events _]\n    (let [id (random-uuid)]\n      (assoc ignored-events id {:id id :event-str \"\" :event-id nil :sort (js/Date.now)}))))\n\n(rf/reg-event-db\n  ::remove-ignored-event\n  ignored-event-interceptors\n  (fn [ignored-events [id]]\n    (dissoc ignored-events id)))\n\n(rf/reg-event-db\n  ::update-ignored-event\n  ignored-event-interceptors\n  (fn [ignored-events [id event-str]]\n    ;; TODO: this won't inform users if they type bad strings in.\n    (let [event (reader.edn/read-string-maybe event-str)]\n      (-> ignored-events\n          (assoc-in [id :event-str] event-str)\n          (update-in [id :event-id] (fn [old-event] (if event event old-event)))))))\n\n(rf/reg-event-db\n  ::set-ignored-events\n  ignored-event-interceptors\n  (fn [_ [ignored-events]]\n    ignored-events))\n\n(def filtered-view-trace-interceptors\n  [(rf/path [:settings :filtered-view-trace])\n   rf/trim-v\n   (local-storage/after \"filtered-view-trace\")])\n\n(rf/reg-event-db\n  ::add-filtered-view-trace\n  filtered-view-trace-interceptors\n  (fn [filtered-view-trace _]\n    (let [id (random-uuid)]\n      (assoc filtered-view-trace id {:id id :ns-str \"\" :ns nil :sort (js/Date.now)}))))\n\n(rf/reg-event-db\n  ::remove-filtered-view-trace\n  filtered-view-trace-interceptors\n  (fn [filtered-view-trace [id]]\n    (dissoc filtered-view-trace id)))\n\n(rf/reg-event-db\n  ::update-filtered-view-trace\n  filtered-view-trace-interceptors\n  (fn [filtered-view-trace [id ns-str]]\n    ;; TODO: this won't inform users if they type bad strings in.\n    (let [event (reader.edn/read-string-maybe ns-str)]\n      (-> filtered-view-trace\n          (assoc-in [id :ns-str] ns-str)\n          (update-in [id :ns] (fn [old-event] (if event event old-event)))))))\n\n(rf/reg-event-db\n  ::set-filtered-view-trace\n  filtered-view-trace-interceptors\n  (fn [_ [ignored-events]]\n    ignored-events))\n\n(def low-level-trace-interceptors\n  [(rf/path [:settings :low-level-trace])\n   rf/trim-v\n   (local-storage/after \"low-level-trace\")])\n\n(rf/reg-event-db\n  ::set-low-level-trace\n  low-level-trace-interceptors\n  (fn [_ [low-level]]\n    low-level))\n\n(rf/reg-event-db\n  ::low-level-trace\n  low-level-trace-interceptors\n  (fn [low-level [trace-type capture?]]\n    (assoc low-level trace-type capture?)))\n\n(rf/reg-event-db\n  ::debug?\n  [(rf/path [:settings :debug?]) rf/trim-v]\n  (fn [_ [debug?]]\n    debug?))\n\n(rf/reg-event-db\n  ::app-db-follows-events?\n  [(rf/path [:settings :app-db-follows-events?]) rf/trim-v (local-storage/after \"app-db-follows-events?\")]\n  (fn [_ [follows-events?]]\n    follows-events?))\n\n(rf/reg-event-db\n  ::external-window-dimensions\n  [(rf/path [:settings :external-window-dimensions]) rf/trim-v (local-storage/after \"external-window-dimensions\")]\n  (fn [_ [external-window-dimensions]]\n    external-window-dimensions))\n\n(rf/reg-event-db\n  ::external-window-resize\n  [(rf/path [:settings :external-window-dimensions]) rf/unwrap (local-storage/after \"external-window-dimensions\")]\n  (fn [external-window-dimensions {:keys [width height]}]\n    (assoc external-window-dimensions :width width :height height)))\n\n(rf/reg-event-db\n  ::external-window-position\n  [(rf/path [:settings :external-window-dimensions]) rf/unwrap (local-storage/after \"external-window-dimensions\")]\n  (fn [external-window-dimensions {:keys [left top]}]\n    (assoc external-window-dimensions :left left :top top)))\n\n(rf/reg-event-fx\n  ::user-toggle-panel\n  [(rf/path [:settings])\n   (local-storage/after \"using-trace?\" :using-trace?)\n   (local-storage/after \"show-panel\" :show-panel?)]\n  (fn [settings _]\n    (let [now-showing?    (not (get settings :show-panel?))\n          external-panel? (get settings :external-window?)\n          using-trace?    (or external-panel? now-showing?)]\n      (merge\n        {:db (-> settings\n                 (assoc :using-trace? using-trace?)\n                 (assoc :show-panel? now-showing?))}\n        (if now-showing?\n          {::trace/enable {:key ::cb}}\n          (when-not external-panel?\n            {::trace/disable {:key ::cb}}))))))\n\n(rf/reg-event-fx\n  ::enable-tracing\n  (fn [_ _]\n    {::trace/enable {:key ::cb}}))\n\n(rf/reg-event-fx\n  ::disable-tracing\n  (fn [_ _]\n    {::trace/disable {:key ::cb}}))"]}