{"version":3,"sources":["day8/re_frame_10x/panels/event/events.cljs"],"mappings":";AAIA,AAAA,AAAA,AAACA,AAEE,AAAA,AAAA,AAAA,AAACC,AAA6BC,AAC/B,AAAAC,AAAKG;AAAL,AAAA,AAAAF,AAAAD;AAAA,AAAAE,AAAAD,AAAA,AAAA,AAAiBG;AAAjB,AAAAF,AAAAD,AAAA,AAAA,AAA4BI;AAA5B,AACE,AAACC,AAASH,AAAWC,AAAWC;;AAEpC,AAAA,AAAA,AAACR,AAEE,AAAA,AAAA,AAAA,AAACC,AAAmCC,AACrC,AAAAQ,AAAKE;AAAL,AAAA,AAAAD,AAAAD;AAAA,AAAAL,AAAAM,AAAA,AAAA,AAAQE;AAAR,AACEA;;AAEJ,AAAA,AAAA,AAACb,AAEE,AAAA,AAAA,AAAA,AAACC,AAAmCC,AACrC,AAAAY,AAAKF;AAAL,AAAA,AAAAG,AAAAD;AAAA,AAAAT,AAAAU,AAAA,AAAA,AAAQC;AAAR,AACEA;;AAEJ,AAAA,AAAA,AAAChB,AAEE,AAAA,AAAA,AAAA,AAACC,AAAmCC,AACrC,AAAAe,AAAKE;AAAL,AAAA,AAAAD,AAAAD;AAAA,AAAAZ,AAAAa,AAAA,AAAA,AAAWF;AAAX,AACE,AAAI,AAACI,AAAED,AAAKH;AAAZ;;AAEEA;;;AAEN,AAAA,AAAA,AAAChB,AAEE,AAAA,AAAA,AAAA,AAACC,AAAiCC,AACnC,AAAAmB,AAAKT;AAAL,AAAA,AAAAU,AAAAD;AAAA,AAAAhB,AAAAiB,AAAA,AAAA,AAAQC;AAAR,AACEA;;AAEJ,AAAA,AAAA,AAACvB,AAEE,AAAA,AAAA,AAAA,AAACC,AAAiCC,AACnC,AAAAsB,AAAKE;AAAL,AAAA,AAAAD,AAAAD;AAAA,AAAAnB,AAAAoB,AAAA,AAAA,AAAoBE;AAApB,AACE,AAAI,AAAK,AAAA,AAACP,AAAEM,AAAwB,AAAA,AAACN,AAAEO;AAAvC;;AAEE,AAAI,AAAA,AAACP,AAAEO;AAAP;;AAAA","names":["day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.core.reg_event_db","day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.core.path","day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.core/trim-v","p__48176","vec__48177","cljs.core.nth","code-open?","open?-path","open?","cljs.core/assoc-in","p__48180","vec__48181","_","execution-order?","p__48184","vec__48185","new-form","p__48189","vec__48194","form","cljs.core._EQ_","p__48198","vec__48200","show-all-code?","p__48206","vec__48207","current-state","new-state"],"sourcesContent":["(ns day8.re-frame-10x.panels.event.events\n  (:require\n    [day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.core :as rf]))\n\n(rf/reg-event-db\n  ::set-code-visibility\n  [(rf/path [:code :code-open?]) rf/trim-v]\n  (fn [code-open? [open?-path open?]]\n    (assoc-in code-open? open?-path open?)))\n\n(rf/reg-event-db\n  ::set-execution-order\n  [(rf/path [:code :execution-order?]) rf/trim-v]\n  (fn [_ [execution-order?]]\n    execution-order?))\n\n(rf/reg-event-db\n  ::hover-form\n  [(rf/path [:code :highlighted-form]) rf/trim-v]\n  (fn [_ [new-form]]\n    new-form))\n\n(rf/reg-event-db\n  ::exit-hover-form\n  [(rf/path [:code :highlighted-form]) rf/trim-v]\n  (fn [form [new-form]]\n    (if (= form new-form)\n      nil\n      new-form)))\n\n(rf/reg-event-db\n  ::set-show-all-code?\n  [(rf/path [:code :show-all-code?]) rf/trim-v]\n  (fn [_ [show-all-code?]]\n    show-all-code?))\n\n(rf/reg-event-db\n  ::repl-msg-state\n  [(rf/path [:code :repl-msg-state]) rf/trim-v]\n  (fn [current-state [new-state]]\n    (if (and (= current-state :running) (= new-state :start)) ;; Toggles between :running and :re-running to guarantee rerenderig when you continuously call this event\n      :re-running\n      (if (= new-state :start) :running :end))))"]}